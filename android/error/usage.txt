com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction
com.badlogic.gdx.utils.IntIntMap$MapIterator
org.objenesis.instantiator.sun.SunReflectionFactoryInstantiator
com.badlogic.gdx.maps.MapRenderer
com.badlogic.gdx.utils.AtomicQueue
com.badlogic.gdx.backends.android.DefaultAndroidInput$3
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue
com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField
    public void setClass(java.lang.Class)
    public void setClass(java.lang.Class,com.esotericsoftware.kryo.Serializer)
    public com.esotericsoftware.kryo.Serializer getSerializer()
    public void setCanBeNull(boolean)
com.esotericsoftware.kryonet.Connection
    public boolean isConnected()
    public void updateReturnTripTime()
    public int getReturnTripTime()
    public void setKeepAliveTCP(int)
    public void setTimeout(int)
    public void removeListener(com.esotericsoftware.kryonet.Listener)
    public com.esotericsoftware.kryonet.EndPoint getEndPoint()
    public java.net.InetSocketAddress getRemoteAddressTCP()
    public java.net.InetSocketAddress getRemoteAddressUDP()
    public void setBufferPositionFix(boolean)
    public void setName(java.lang.String)
    public int getTcpWriteBufferSize()
    public void setIdleThreshold(float)
com.badlogic.gdx.graphics.g3d.ModelBatch
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6
com.badlogic.gdx.graphics.g3d.ModelInstance
com.badlogic.gdx.utils.compression.lzma.Decoder
com.badlogic.gdx.net.ServerSocket
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single
com.badlogic.gdx.math.ConvexHull
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy
    public void sort(com.badlogic.gdx.utils.Array)
    java.util.Comparator comparator
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones
com.badlogic.gdx.Net$HttpMethods
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters
com.badlogic.gdx.Preferences
    public abstract com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean)
    public abstract com.badlogic.gdx.Preferences putInteger(java.lang.String,int)
    public abstract com.badlogic.gdx.Preferences putLong(java.lang.String,long)
    public abstract com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
    public abstract com.badlogic.gdx.Preferences put(java.util.Map)
    public abstract boolean getBoolean(java.lang.String)
    public abstract int getInteger(java.lang.String)
    public abstract long getLong(java.lang.String)
    public abstract float getFloat(java.lang.String)
    public abstract java.lang.String getString(java.lang.String)
    public abstract boolean getBoolean(java.lang.String,boolean)
    public abstract int getInteger(java.lang.String,int)
    public abstract long getLong(java.lang.String,long)
    public abstract float getFloat(java.lang.String,float)
    public abstract java.util.Map get()
    public abstract boolean contains(java.lang.String)
    public abstract void clear()
    public abstract void remove(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random
com.badlogic.gdx.math.Ellipse
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader
com.badlogic.gdx.utils.compression.Lzma$CommandLine
com.badlogic.gdx.graphics.glutils.GLVersion
    public com.badlogic.gdx.graphics.glutils.GLVersion$Type getType()
    public int getMinorVersion()
    public int getReleaseVersion()
    public java.lang.String getVendorString()
    public java.lang.String getRendererString()
    public boolean isVersionEqualToOrHigher(int,int)
    public java.lang.String getDebugVersionString()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape getShape()
    public void setShape(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape)
    public boolean isEdges()
    public void setEdges(boolean)
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide getSide()
    public void setSide(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide)
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap
    public void <init>(java.io.InputStream,int)
    public void <init>(java.nio.ByteBuffer,long[])
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(java.io.InputStream,int)
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(int,int,int)
    private static native void drawLine(long,int,int,int,int,int)
    private static native void drawRect(long,int,int,int,int,int)
    private static native void drawCircle(long,int,int,int,int)
    private static native void fillTriangle(long,int,int,int,int,int,int,int)
    private static native void setScale(long,int)
    public void drawLine(int,int,int,int,int)
    public void drawRect(int,int,int,int,int)
    public void drawCircle(int,int,int,int)
    public void fillTriangle(int,int,int,int,int,int,int)
    public void setScale(int)
    public java.lang.String getFormatString()
    public static final int GDX2D_FORMAT_ALPHA
    public static final int GDX2D_FORMAT_LUMINANCE_ALPHA
    public static final int GDX2D_FORMAT_RGB888
    public static final int GDX2D_FORMAT_RGBA8888
    public static final int GDX2D_FORMAT_RGB565
    public static final int GDX2D_FORMAT_RGBA4444
    public static final int GDX2D_SCALE_NEAREST
    public static final int GDX2D_SCALE_LINEAR
    public static final int GDX2D_BLEND_NONE
    public static final int GDX2D_BLEND_SRC_OVER
com.badlogic.gdx.audio.Sound
com.badlogic.gdx.graphics.g3d.loader.MtlLoader
com.badlogic.gdx.utils.Select
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter
com.badlogic.gdx.utils.LongMap$Keys
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader
com.badlogic.gdx.assets.loaders.BitmapFontLoader
com.badlogic.gdx.scenes.scene2d.utils.Selection
    public boolean hasItems()
    public void setAll(com.badlogic.gdx.utils.Array)
    public void remove(java.lang.Object)
    public void removeAll(com.badlogic.gdx.utils.Array)
    public java.lang.Object getLastSelected()
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
    public void setDisabled(boolean)
    public boolean getToggle()
    public void setToggle(boolean)
    public void setProgrammaticChangeEvents(boolean)
com.badlogic.gdx.scenes.scene2d.actions.DelayAction
com.badlogic.gdx.scenes.scene2d.Action
    public com.badlogic.gdx.scenes.scene2d.Actor getTarget()
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3$1
com.badlogic.gdx.utils.ArrayMap$Keys
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer
com.esotericsoftware.kryo.factories.PseudoSerializerFactory
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart
org.objenesis.ObjenesisBase
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2
com.badlogic.gdx.graphics.TextureArrayData$Factory
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream
    public byte[] getBuffer()
com.esotericsoftware.kryo.io.UnsafeOutput
com.esotericsoftware.kryonet.Listener$QueuedListener$2
com.badlogic.gdx.math.Path
com.badlogic.gdx.utils.Base64Coder$CharMap
com.badlogic.gdx.net.NetJavaSocketImpl
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute
com.badlogic.gdx.graphics.Cubemap
    public void <init>(com.badlogic.gdx.graphics.CubemapData)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public void <init>(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData)
    private static void addManagedCubemap(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Cubemap)
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
    public static int getNumManagedCubemaps()
    public int getWidth()
    public int getHeight()
    public int getDepth()
com.badlogic.gdx.graphics.g3d.Attribute
com.esotericsoftware.jsonbeans.ObjectMap
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
    public com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.utils.ArrayMap
    public void <init>(int)
    public void <init>(boolean,int,java.lang.Class,java.lang.Class)
    public void <init>(java.lang.Class,java.lang.Class)
    public void <init>(com.badlogic.gdx.utils.ArrayMap)
    public int put(java.lang.Object,java.lang.Object,int)
    public void putAll(com.badlogic.gdx.utils.ArrayMap)
    public void putAll(com.badlogic.gdx.utils.ArrayMap,int,int)
    public java.lang.Object getKey(java.lang.Object,boolean)
    public java.lang.Object getKeyAt(int)
    public java.lang.Object getValueAt(int)
    public java.lang.Object firstKey()
    public java.lang.Object firstValue()
    public void setKey(int,java.lang.Object)
    public void setValue(int,java.lang.Object)
    public void insert(int,java.lang.Object,java.lang.Object)
    public boolean containsKey(java.lang.Object)
    public boolean containsValue(java.lang.Object,boolean)
    public int indexOfValue(java.lang.Object,boolean)
    public java.lang.Object removeKey(java.lang.Object)
    public boolean removeValue(java.lang.Object,boolean)
    public boolean notEmpty()
    public boolean isEmpty()
    public java.lang.Object peekKey()
    public java.lang.Object peekValue()
    public void clear(int)
    public void clear()
    public void shrink()
    public void ensureCapacity(int)
    public void reverse()
    public void shuffle()
    public void truncate(int)
    public boolean equalsIdentity(java.lang.Object)
    public com.badlogic.gdx.utils.ArrayMap$Values values()
    public com.badlogic.gdx.utils.ArrayMap$Keys keys()
    private transient com.badlogic.gdx.utils.ArrayMap$Values values1
    private transient com.badlogic.gdx.utils.ArrayMap$Values values2
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys1
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys2
com.esotericsoftware.jsonbeans.ObjectMap$Entries
com.badlogic.gdx.utils.IntArray
    public void <init>(com.badlogic.gdx.utils.IntArray)
    public void <init>(int[])
    public void <init>(boolean,int[],int,int)
    public static varargs com.badlogic.gdx.utils.IntArray with(int[])
    public void add(int,int)
    public void add(int,int,int)
    public void add(int,int,int,int)
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public void set(int,int)
    public void incr(int,int)
    public void incr(int)
    public void mul(int,int)
    public void mul(int)
    public void insertRange(int,int)
    public void swap(int,int)
    public boolean contains(int)
    public int indexOf(int)
    public int lastIndexOf(int)
    public boolean removeValue(int)
    public int removeIndex(int)
    public void removeRange(int,int)
    public boolean removeAll(com.badlogic.gdx.utils.IntArray)
    public int peek()
    public int first()
    public boolean notEmpty()
    public boolean isEmpty()
    public int[] shrink()
    public int[] setSize(int)
    public void sort()
    public void reverse()
    public void shuffle()
    public void truncate(int)
    public int random()
    public int[] toArray()
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.glutils.FloatTextureData
com.badlogic.gdx.utils.QuadTreeFloat
com.badlogic.gdx.graphics.glutils.VertexBufferObject
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    protected void <init>(int,java.nio.ByteBuffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
    public int getNumMaxVertices()
    public java.nio.FloatBuffer getBuffer()
    public void updateVertices(int,float[],int,int)
    protected int getUsage()
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2
com.badlogic.gdx.utils.OrderedSet
    public void <init>(int,float)
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.OrderedSet)
    public static varargs com.badlogic.gdx.utils.OrderedSet with(java.lang.Object[])
    public boolean add(java.lang.Object,int)
    public boolean alter(java.lang.Object,java.lang.Object)
    public boolean alterIndex(int,java.lang.Object)
com.badlogic.gdx.AbstractGraphics
    public float getRawDeltaTime()
    public float getDensity()
    public float getBackBufferScale()
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType
com.badlogic.gdx.assets.loaders.ModelLoader
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters
com.badlogic.gdx.graphics.TextureData$Factory
    public void <init>()
    public static com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,boolean)
com.esotericsoftware.jsonbeans.ObjectMap$Values
org.objenesis.ObjenesisException
com.badlogic.gdx.math.Vector3
    public void <init>(com.badlogic.gdx.math.Vector3)
    public void <init>(float[])
    public void <init>(com.badlogic.gdx.math.Vector2,float)
    public static float len(float,float,float)
    public static float len2(float,float,float)
    public static float dst(float,float,float,float,float,float)
    public static float dst2(float,float,float,float,float,float)
    public static float dot(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Vector3 set(float[])
    public com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector3 setFromSpherical(float,float)
    public com.badlogic.gdx.math.Vector3 setToRandomDirection()
    public com.badlogic.gdx.math.Vector3 cpy()
    public com.badlogic.gdx.math.Vector3 add(float)
    public com.badlogic.gdx.math.Vector3 sub(float)
    public com.badlogic.gdx.math.Vector3 scl(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 scl(float,float,float)
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public float len()
    public boolean idt(com.badlogic.gdx.math.Vector3)
    public float dst(com.badlogic.gdx.math.Vector3)
    public float dst(float,float,float)
    public float dst2(com.badlogic.gdx.math.Vector3)
    public float dst2(float,float,float)
    public float dot(float,float,float)
    public com.badlogic.gdx.math.Vector3 mul4x3(float[])
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Vector3 rot(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 unrotate(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 untransform(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3,float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3,float)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3,float)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector3)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 lerp(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 interpolate(com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Interpolation)
    public com.badlogic.gdx.math.Vector3 slerp(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 fromString(java.lang.String)
    public com.badlogic.gdx.math.Vector3 limit(float)
    public com.badlogic.gdx.math.Vector3 limit2(float)
    public com.badlogic.gdx.math.Vector3 setLength(float)
    public com.badlogic.gdx.math.Vector3 setLength2(float)
    public com.badlogic.gdx.math.Vector3 clamp(float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3,float)
    public boolean epsilonEquals(float,float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3)
    public boolean epsilonEquals(float,float,float)
    public com.badlogic.gdx.math.Vector3 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    private static final long serialVersionUID
com.badlogic.gdx.utils.reflect.ArrayReflection
    public void <init>()
    public static int getLength(java.lang.Object)
    public static java.lang.Object get(java.lang.Object,int)
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction
com.badlogic.gdx.backends.android.AndroidNet
    public void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public boolean openURI(java.lang.String)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeBooleanField
com.badlogic.gdx.utils.Queue
    public void <init>(int,java.lang.Class)
    public void addFirst(java.lang.Object)
    public void ensureCapacity(int)
    public java.lang.Object removeFirst()
    public java.lang.Object removeLast()
    public int indexOf(java.lang.Object,boolean)
    public boolean removeValue(java.lang.Object,boolean)
    public boolean notEmpty()
    public boolean isEmpty()
    public java.lang.Object first()
    public java.lang.Object last()
    public void clear()
    public java.lang.String toString(java.lang.String)
    public boolean equalsIdentity(java.lang.Object)
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute
com.esotericsoftware.jsonbeans.JsonWriter
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder
com.esotericsoftware.kryo.util.Util
    public void <init>()
    public static java.lang.Class getPrimitiveClass(java.lang.Class)
    public static int swapInt(int)
    public static long swapLong(long)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler
com.badlogic.gdx.utils.IntMap$MapIterator
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.graphics.GL30
    public abstract void glReadBuffer(int)
    public abstract void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public abstract void glDrawRangeElements(int,int,int,int,int,int)
    public abstract void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public abstract void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public abstract void glGenQueries(int,int[],int)
    public abstract void glGenQueries(int,java.nio.IntBuffer)
    public abstract void glDeleteQueries(int,int[],int)
    public abstract void glDeleteQueries(int,java.nio.IntBuffer)
    public abstract boolean glIsQuery(int)
    public abstract void glBeginQuery(int,int)
    public abstract void glEndQuery(int)
    public abstract void glGetQueryiv(int,int,java.nio.IntBuffer)
    public abstract void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public abstract boolean glUnmapBuffer(int)
    public abstract java.nio.Buffer glGetBufferPointerv(int,int)
    public abstract void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public abstract void glRenderbufferStorageMultisample(int,int,int,int,int)
    public abstract void glFramebufferTextureLayer(int,int,int,int,int)
    public abstract java.nio.Buffer glMapBufferRange(int,int,int,int)
    public abstract void glFlushMappedBufferRange(int,int,int)
    public abstract void glDeleteVertexArrays(int,int[],int)
    public abstract void glGenVertexArrays(int,int[],int)
    public abstract boolean glIsVertexArray(int)
    public abstract void glBeginTransformFeedback(int)
    public abstract void glEndTransformFeedback()
    public abstract void glBindBufferRange(int,int,int,int,int)
    public abstract void glBindBufferBase(int,int,int)
    public abstract void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public abstract void glVertexAttribIPointer(int,int,int,int,int)
    public abstract void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public abstract void glVertexAttribI4i(int,int,int,int,int)
    public abstract void glVertexAttribI4ui(int,int,int,int,int)
    public abstract void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public abstract int glGetFragDataLocation(int,java.lang.String)
    public abstract void glUniform1uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4uiv(int,int,java.nio.IntBuffer)
    public abstract void glClearBufferiv(int,int,java.nio.IntBuffer)
    public abstract void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public abstract void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public abstract void glClearBufferfi(int,int,float,int)
    public abstract java.lang.String glGetStringi(int,int)
    public abstract void glCopyBufferSubData(int,int,int,int,int)
    public abstract void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public abstract void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public abstract int glGetUniformBlockIndex(int,java.lang.String)
    public abstract void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public abstract java.lang.String glGetActiveUniformBlockName(int,int)
    public abstract void glUniformBlockBinding(int,int,int)
    public abstract void glGetInteger64v(int,java.nio.LongBuffer)
    public abstract void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public abstract void glGenSamplers(int,int[],int)
    public abstract void glGenSamplers(int,java.nio.IntBuffer)
    public abstract void glDeleteSamplers(int,int[],int)
    public abstract void glDeleteSamplers(int,java.nio.IntBuffer)
    public abstract boolean glIsSampler(int)
    public abstract void glBindSampler(int,int)
    public abstract void glSamplerParameteri(int,int,int)
    public abstract void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glSamplerParameterf(int,int,float)
    public abstract void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glVertexAttribDivisor(int,int)
    public abstract void glBindTransformFeedback(int,int)
    public abstract void glDeleteTransformFeedbacks(int,int[],int)
    public abstract void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract void glGenTransformFeedbacks(int,int[],int)
    public abstract void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract boolean glIsTransformFeedback(int)
    public abstract void glPauseTransformFeedback()
    public abstract void glResumeTransformFeedback()
    public abstract void glProgramParameteri(int,int,int)
    public abstract void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public abstract void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
    public abstract void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
    public static final int GL_READ_BUFFER
    public static final int GL_UNPACK_ROW_LENGTH
    public static final int GL_UNPACK_SKIP_ROWS
    public static final int GL_UNPACK_SKIP_PIXELS
    public static final int GL_PACK_ROW_LENGTH
    public static final int GL_PACK_SKIP_ROWS
    public static final int GL_PACK_SKIP_PIXELS
    public static final int GL_COLOR
    public static final int GL_DEPTH
    public static final int GL_STENCIL
    public static final int GL_RED
    public static final int GL_RGB8
    public static final int GL_RGBA8
    public static final int GL_RGB10_A2
    public static final int GL_TEXTURE_BINDING_3D
    public static final int GL_UNPACK_SKIP_IMAGES
    public static final int GL_UNPACK_IMAGE_HEIGHT
    public static final int GL_TEXTURE_3D
    public static final int GL_TEXTURE_WRAP_R
    public static final int GL_MAX_3D_TEXTURE_SIZE
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV
    public static final int GL_MAX_ELEMENTS_VERTICES
    public static final int GL_MAX_ELEMENTS_INDICES
    public static final int GL_TEXTURE_MIN_LOD
    public static final int GL_TEXTURE_MAX_LOD
    public static final int GL_TEXTURE_BASE_LEVEL
    public static final int GL_TEXTURE_MAX_LEVEL
    public static final int GL_MIN
    public static final int GL_MAX
    public static final int GL_DEPTH_COMPONENT24
    public static final int GL_MAX_TEXTURE_LOD_BIAS
    public static final int GL_TEXTURE_COMPARE_MODE
    public static final int GL_TEXTURE_COMPARE_FUNC
    public static final int GL_CURRENT_QUERY
    public static final int GL_QUERY_RESULT
    public static final int GL_QUERY_RESULT_AVAILABLE
    public static final int GL_BUFFER_MAPPED
    public static final int GL_BUFFER_MAP_POINTER
    public static final int GL_STREAM_READ
    public static final int GL_STREAM_COPY
    public static final int GL_STATIC_READ
    public static final int GL_STATIC_COPY
    public static final int GL_DYNAMIC_READ
    public static final int GL_DYNAMIC_COPY
    public static final int GL_MAX_DRAW_BUFFERS
    public static final int GL_DRAW_BUFFER0
    public static final int GL_DRAW_BUFFER1
    public static final int GL_DRAW_BUFFER2
    public static final int GL_DRAW_BUFFER3
    public static final int GL_DRAW_BUFFER4
    public static final int GL_DRAW_BUFFER5
    public static final int GL_DRAW_BUFFER6
    public static final int GL_DRAW_BUFFER7
    public static final int GL_DRAW_BUFFER8
    public static final int GL_DRAW_BUFFER9
    public static final int GL_DRAW_BUFFER10
    public static final int GL_DRAW_BUFFER11
    public static final int GL_DRAW_BUFFER12
    public static final int GL_DRAW_BUFFER13
    public static final int GL_DRAW_BUFFER14
    public static final int GL_DRAW_BUFFER15
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_SAMPLER_3D
    public static final int GL_SAMPLER_2D_SHADOW
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT
    public static final int GL_PIXEL_PACK_BUFFER
    public static final int GL_PIXEL_UNPACK_BUFFER
    public static final int GL_PIXEL_PACK_BUFFER_BINDING
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING
    public static final int GL_FLOAT_MAT2x3
    public static final int GL_FLOAT_MAT2x4
    public static final int GL_FLOAT_MAT3x2
    public static final int GL_FLOAT_MAT3x4
    public static final int GL_FLOAT_MAT4x2
    public static final int GL_FLOAT_MAT4x3
    public static final int GL_SRGB
    public static final int GL_SRGB8
    public static final int GL_SRGB8_ALPHA8
    public static final int GL_COMPARE_REF_TO_TEXTURE
    public static final int GL_MAJOR_VERSION
    public static final int GL_MINOR_VERSION
    public static final int GL_NUM_EXTENSIONS
    public static final int GL_RGBA32F
    public static final int GL_RGB32F
    public static final int GL_RGBA16F
    public static final int GL_RGB16F
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET
    public static final int GL_MAX_VARYING_COMPONENTS
    public static final int GL_TEXTURE_2D_ARRAY
    public static final int GL_TEXTURE_BINDING_2D_ARRAY
    public static final int GL_R11F_G11F_B10F
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV
    public static final int GL_RGB9_E5
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    public static final int GL_RASTERIZER_DISCARD
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    public static final int GL_INTERLEAVED_ATTRIBS
    public static final int GL_SEPARATE_ATTRIBS
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
    public static final int GL_RGBA32UI
    public static final int GL_RGB32UI
    public static final int GL_RGBA16UI
    public static final int GL_RGB16UI
    public static final int GL_RGBA8UI
    public static final int GL_RGB8UI
    public static final int GL_RGBA32I
    public static final int GL_RGB32I
    public static final int GL_RGBA16I
    public static final int GL_RGB16I
    public static final int GL_RGBA8I
    public static final int GL_RGB8I
    public static final int GL_RED_INTEGER
    public static final int GL_RGB_INTEGER
    public static final int GL_RGBA_INTEGER
    public static final int GL_SAMPLER_2D_ARRAY
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW
    public static final int GL_SAMPLER_CUBE_SHADOW
    public static final int GL_UNSIGNED_INT_VEC2
    public static final int GL_UNSIGNED_INT_VEC3
    public static final int GL_UNSIGNED_INT_VEC4
    public static final int GL_INT_SAMPLER_2D
    public static final int GL_INT_SAMPLER_3D
    public static final int GL_INT_SAMPLER_CUBE
    public static final int GL_INT_SAMPLER_2D_ARRAY
    public static final int GL_UNSIGNED_INT_SAMPLER_2D
    public static final int GL_UNSIGNED_INT_SAMPLER_3D
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
    public static final int GL_BUFFER_ACCESS_FLAGS
    public static final int GL_BUFFER_MAP_LENGTH
    public static final int GL_BUFFER_MAP_OFFSET
    public static final int GL_DEPTH_COMPONENT32F
    public static final int GL_DEPTH32F_STENCIL8
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    public static final int GL_FRAMEBUFFER_DEFAULT
    public static final int GL_FRAMEBUFFER_UNDEFINED
    public static final int GL_DEPTH_STENCIL_ATTACHMENT
    public static final int GL_DEPTH_STENCIL
    public static final int GL_UNSIGNED_INT_24_8
    public static final int GL_DEPTH24_STENCIL8
    public static final int GL_UNSIGNED_NORMALIZED
    public static final int GL_DRAW_FRAMEBUFFER_BINDING
    public static final int GL_READ_FRAMEBUFFER
    public static final int GL_DRAW_FRAMEBUFFER
    public static final int GL_READ_FRAMEBUFFER_BINDING
    public static final int GL_RENDERBUFFER_SAMPLES
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    public static final int GL_MAX_COLOR_ATTACHMENTS
    public static final int GL_COLOR_ATTACHMENT1
    public static final int GL_COLOR_ATTACHMENT2
    public static final int GL_COLOR_ATTACHMENT3
    public static final int GL_COLOR_ATTACHMENT4
    public static final int GL_COLOR_ATTACHMENT5
    public static final int GL_COLOR_ATTACHMENT6
    public static final int GL_COLOR_ATTACHMENT7
    public static final int GL_COLOR_ATTACHMENT8
    public static final int GL_COLOR_ATTACHMENT9
    public static final int GL_COLOR_ATTACHMENT10
    public static final int GL_COLOR_ATTACHMENT11
    public static final int GL_COLOR_ATTACHMENT12
    public static final int GL_COLOR_ATTACHMENT13
    public static final int GL_COLOR_ATTACHMENT14
    public static final int GL_COLOR_ATTACHMENT15
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    public static final int GL_MAX_SAMPLES
    public static final int GL_HALF_FLOAT
    public static final int GL_MAP_READ_BIT
    public static final int GL_MAP_WRITE_BIT
    public static final int GL_MAP_INVALIDATE_RANGE_BIT
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT
    public static final int GL_MAP_UNSYNCHRONIZED_BIT
    public static final int GL_RG
    public static final int GL_RG_INTEGER
    public static final int GL_R8
    public static final int GL_RG8
    public static final int GL_R16F
    public static final int GL_R32F
    public static final int GL_RG16F
    public static final int GL_RG32F
    public static final int GL_R8I
    public static final int GL_R8UI
    public static final int GL_R16I
    public static final int GL_R16UI
    public static final int GL_R32I
    public static final int GL_R32UI
    public static final int GL_RG8I
    public static final int GL_RG8UI
    public static final int GL_RG16I
    public static final int GL_RG16UI
    public static final int GL_RG32I
    public static final int GL_RG32UI
    public static final int GL_VERTEX_ARRAY_BINDING
    public static final int GL_R8_SNORM
    public static final int GL_RG8_SNORM
    public static final int GL_RGB8_SNORM
    public static final int GL_RGBA8_SNORM
    public static final int GL_SIGNED_NORMALIZED
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX
    public static final int GL_COPY_READ_BUFFER
    public static final int GL_COPY_WRITE_BUFFER
    public static final int GL_COPY_READ_BUFFER_BINDING
    public static final int GL_COPY_WRITE_BUFFER_BINDING
    public static final int GL_UNIFORM_BUFFER
    public static final int GL_UNIFORM_BUFFER_BINDING
    public static final int GL_UNIFORM_BUFFER_START
    public static final int GL_UNIFORM_BUFFER_SIZE
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
    public static final int GL_ACTIVE_UNIFORM_BLOCKS
    public static final int GL_UNIFORM_TYPE
    public static final int GL_UNIFORM_SIZE
    public static final int GL_UNIFORM_NAME_LENGTH
    public static final int GL_UNIFORM_BLOCK_INDEX
    public static final int GL_UNIFORM_OFFSET
    public static final int GL_UNIFORM_ARRAY_STRIDE
    public static final int GL_UNIFORM_MATRIX_STRIDE
    public static final int GL_UNIFORM_IS_ROW_MAJOR
    public static final int GL_UNIFORM_BLOCK_BINDING
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    public static final int GL_INVALID_INDEX
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT
    public static final int GL_OBJECT_TYPE
    public static final int GL_SYNC_CONDITION
    public static final int GL_SYNC_STATUS
    public static final int GL_SYNC_FLAGS
    public static final int GL_SYNC_FENCE
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE
    public static final int GL_UNSIGNALED
    public static final int GL_SIGNALED
    public static final int GL_ALREADY_SIGNALED
    public static final int GL_TIMEOUT_EXPIRED
    public static final int GL_CONDITION_SATISFIED
    public static final int GL_WAIT_FAILED
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT
    public static final long GL_TIMEOUT_IGNORED
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR
    public static final int GL_ANY_SAMPLES_PASSED
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE
    public static final int GL_SAMPLER_BINDING
    public static final int GL_RGB10_A2UI
    public static final int GL_TEXTURE_SWIZZLE_R
    public static final int GL_TEXTURE_SWIZZLE_G
    public static final int GL_TEXTURE_SWIZZLE_B
    public static final int GL_TEXTURE_SWIZZLE_A
    public static final int GL_GREEN
    public static final int GL_BLUE
    public static final int GL_INT_2_10_10_10_REV
    public static final int GL_TRANSFORM_FEEDBACK
    public static final int GL_TRANSFORM_FEEDBACK_PAUSED
    public static final int GL_TRANSFORM_FEEDBACK_ACTIVE
    public static final int GL_TRANSFORM_FEEDBACK_BINDING
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT
    public static final int GL_PROGRAM_BINARY_LENGTH
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS
    public static final int GL_PROGRAM_BINARY_FORMATS
    public static final int GL_COMPRESSED_R11_EAC
    public static final int GL_COMPRESSED_SIGNED_R11_EAC
    public static final int GL_COMPRESSED_RG11_EAC
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC
    public static final int GL_COMPRESSED_RGB8_ETC2
    public static final int GL_COMPRESSED_SRGB8_ETC2
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT
    public static final int GL_MAX_ELEMENT_INDEX
    public static final int GL_NUM_SAMPLE_COUNTS
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute
com.badlogic.gdx.utils.viewport.ExtendViewport
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1$1
com.badlogic.gdx.utils.PerformanceCounter
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face
    private static native int getStyleFlags(long)
    private static native int getAscender(long)
    private static native int getDescender(long)
    private static native int getHeight(long)
    private static native int getMaxAdvanceHeight(long)
    private static native int getUnderlinePosition(long)
    private static native int getUnderlineThickness(long)
    private static native boolean selectSize(long,int)
    private static native boolean setCharSize(long,int,int,int,int)
    private static native boolean loadGlyph(long,int,int)
    public int getStyleFlags()
    public int getAscender()
    public int getDescender()
    public int getHeight()
    public int getMaxAdvanceHeight()
    public int getUnderlinePosition()
    public int getUnderlineThickness()
    public boolean selectSize(int)
    public boolean setCharSize(int,int,int,int)
    public boolean loadGlyph(int,int)
com.esotericsoftware.kryo.serializers.UnsafeCacheFields
com.badlogic.gdx.backends.android.AndroidApplication
    public void initialize(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public long getJavaHeap()
    public long getNativeHeap()
    public void exit()
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public void error(java.lang.String,java.lang.String,java.lang.Throwable)
    public void setLogLevel(int)
    public int getLogLevel()
    public void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public synthetic bridge com.badlogic.gdx.Input getInput()
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer
com.badlogic.gdx.graphics.glutils.ShaderProgram
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public static int getNumManagedShaderPrograms()
    public void setUniformi(int,int)
    public void setUniformi(java.lang.String,int,int)
    public void setUniformi(int,int,int)
    public void setUniformi(java.lang.String,int,int,int)
    public void setUniformi(int,int,int,int)
    public void setUniformi(java.lang.String,int,int,int,int)
    public void setUniformi(int,int,int,int,int)
    public void setUniformf(java.lang.String,float)
    public void setUniformf(int,float)
    public void setUniformf(java.lang.String,float,float)
    public void setUniformf(int,float,float)
    public void setUniformf(java.lang.String,float,float,float)
    public void setUniformf(int,float,float,float)
    public void setUniformf(java.lang.String,float,float,float,float)
    public void setUniformf(int,float,float,float,float)
    public void setUniform1fv(java.lang.String,float[],int,int)
    public void setUniform1fv(int,float[],int,int)
    public void setUniform2fv(java.lang.String,float[],int,int)
    public void setUniform2fv(int,float[],int,int)
    public void setUniform3fv(java.lang.String,float[],int,int)
    public void setUniform3fv(int,float[],int,int)
    public void setUniform4fv(java.lang.String,float[],int,int)
    public void setUniform4fv(int,float[],int,int)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix3fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(int,float[],int,int)
    public void setUniformMatrix4fv(java.lang.String,float[],int,int)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector2)
    public void setUniformf(int,com.badlogic.gdx.math.Vector2)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector3)
    public void setUniformf(int,com.badlogic.gdx.math.Vector3)
    public void setUniformf(java.lang.String,com.badlogic.gdx.graphics.Color)
    public void setUniformf(int,com.badlogic.gdx.graphics.Color)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,int)
    public void begin()
    public void end()
    public void enableVertexAttribute(java.lang.String)
    public void setAttributef(java.lang.String,float,float,float,float)
    public boolean hasAttribute(java.lang.String)
    public int getAttributeType(java.lang.String)
    public int getAttributeSize(java.lang.String)
    public boolean hasUniform(java.lang.String)
    public int getUniformType(java.lang.String)
    public int getUniformLocation(java.lang.String)
    public int getUniformSize(java.lang.String)
    public java.lang.String[] getAttributes()
    public java.lang.String[] getUniforms()
    public java.lang.String getVertexShaderSource()
    public java.lang.String getFragmentShaderSource()
    public int getHandle()
    public static final java.lang.String POSITION_ATTRIBUTE
    public static final java.lang.String NORMAL_ATTRIBUTE
    public static final java.lang.String COLOR_ATTRIBUTE
    public static final java.lang.String TEXCOORD_ATTRIBUTE
    public static final java.lang.String TANGENT_ATTRIBUTE
    public static final java.lang.String BINORMAL_ATTRIBUTE
    public static final java.lang.String BONEWEIGHT_ATTRIBUTE
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction
    public com.badlogic.gdx.scenes.scene2d.EventListener getListener()
    public boolean getCapture()
com.tastygamesstudio.phone.BuildConfig
com.esotericsoftware.kryo.io.Output
    public void <init>(int)
    public void <init>(int,int)
    public void <init>(byte[])
    public void <init>(byte[],int)
    public void <init>(java.io.OutputStream)
    public void <init>(java.io.OutputStream,int)
    private void writeUtf8Length(int)
    private void writeString_slow(java.lang.CharSequence,int,int)
    private void writeAscii_slow(java.lang.String,int)
    public static int intLength(int,boolean)
    public static int longLength(long,boolean)
    public java.io.OutputStream getOutputStream()
    public void setOutputStream(java.io.OutputStream)
    public void setBuffer(byte[])
    public void setBuffer(byte[],int)
    public byte[] getBuffer()
    public byte[] toBytes()
    public void setPosition(int)
    public final long total()
    public void clear()
    protected boolean require(int)
    public void flush()
    public void close()
    public void write(int)
    public void write(byte[])
    public void write(byte[],int,int)
    public void writeBytes(byte[],int,int)
    public void writeAscii(java.lang.String)
    public int writeFloat(float,float,boolean)
    public int writeVarLong(long,boolean)
    public int writeDouble(double,double,boolean)
    public void writeInts(int[])
    public void writeLongs(long[])
    protected byte[] buffer
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse
com.badlogic.gdx.Graphics$Monitor
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2
com.badlogic.gdx.graphics.g3d.model.NodeAnimation
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17
com.esotericsoftware.kryo.io.KryoObjectInput
com.esotericsoftware.kryo.util.IntArray
    public void <init>(com.esotericsoftware.kryo.util.IntArray)
    public void <init>(int[])
    public void <init>(boolean,int[])
    public void addAll(com.esotericsoftware.kryo.util.IntArray)
    public void addAll(com.esotericsoftware.kryo.util.IntArray,int,int)
    public void addAll(int[])
    public void addAll(int[],int,int)
    public void set(int,int)
    public void insert(int,int)
    public void swap(int,int)
    public boolean contains(int)
    public boolean removeValue(int)
    public int removeIndex(int)
    public int peek()
    public void clear()
    public void shrink()
    public int[] ensureCapacity(int)
    public void sort()
    public void reverse()
    public void truncate(int)
    public int[] toArray()
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    public static void unbind()
    public com.badlogic.gdx.graphics.GLTexture getColorBufferTexture()
    public com.badlogic.gdx.utils.Array getTextureAttachments()
    public void bind()
    public void begin()
    protected void setFrameBufferViewport()
    public void end()
    public void end(int,int,int,int)
    public int getFramebufferHandle()
    public int getDepthBufferHandle()
    public int getStencilBufferHandle()
    protected int getDepthStencilPackedBuffer()
    public int getHeight()
    public int getWidth()
    protected static final int GL_DEPTH24_STENCIL8_OES
com.esotericsoftware.kryonet.rmi.ObjectSpace$1$1
com.esotericsoftware.kryo.serializers.BeanSerializer$CachedProperty
org.objenesis.strategy.PlatformDescription
com.badlogic.gdx.utils.UBJsonWriter$JsonObject
com.badlogic.gdx.math.Polygon
com.badlogic.gdx.utils.IntIntMap$Entries
com.badlogic.gdx.utils.Align
com.badlogic.gdx.graphics.g3d.loader.ObjLoader
com.badlogic.gdx.InputMultiplexer
    public void <init>()
    public void addProcessor(int,com.badlogic.gdx.InputProcessor)
    public void removeProcessor(int)
    public void addProcessor(com.badlogic.gdx.InputProcessor)
    public void removeProcessor(com.badlogic.gdx.InputProcessor)
    public int size()
    public void clear()
    public varargs void setProcessors(com.badlogic.gdx.InputProcessor[])
    public void setProcessors(com.badlogic.gdx.utils.Array)
    public com.badlogic.gdx.utils.SnapshotArray getProcessors()
com.esotericsoftware.kryo.serializers.CollectionSerializer
    public void <init>(java.lang.Class,com.esotericsoftware.kryo.Serializer)
    public void <init>(java.lang.Class,com.esotericsoftware.kryo.Serializer,boolean)
com.badlogic.gdx.Net
    public abstract void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
    public abstract void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public abstract com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public abstract boolean openURI(java.lang.String)
com.badlogic.gdx.utils.PooledLinkedList$Item
com.esotericsoftware.kryonet.rmi.ObjectSpace$2
com.badlogic.gdx.Input$TextInputListener
com.badlogic.gdx.net.SocketHints
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap
    private static native int getNumGray(long)
    public int getNumGray()
com.badlogic.gdx.assets.loaders.ShaderProgramLoader
com.badlogic.gdx.backends.android.InputProcessorLW
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer
com.badlogic.gdx.input.GestureDetector
    public boolean isLongPressed()
    public boolean isLongPressed(float)
    public void invalidateTapSquare()
    public void setTapCountInterval(float)
    public void setLongPressSeconds(float)
    public void setMaxFlingDelay(long)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25
com.badlogic.gdx.graphics.g3d.utils.TextureBinder
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter
com.esotericsoftware.kryo.util.IdentityMap
    public void <init>(int)
    private boolean containsKeyStash(java.lang.Object)
    public java.lang.Object get(java.lang.Object,java.lang.Object)
    public java.lang.Object remove(java.lang.Object)
    java.lang.Object removeStash(java.lang.Object)
    void removeStashIndex(int)
    public void shrink(int)
    public boolean containsValue(java.lang.Object,boolean)
    public boolean containsKey(java.lang.Object)
    public java.lang.Object findKey(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public com.esotericsoftware.kryo.util.IdentityMap$Entries entries()
    public com.esotericsoftware.kryo.util.IdentityMap$Values values()
    public com.esotericsoftware.kryo.util.IdentityMap$Keys keys()
    private com.esotericsoftware.kryo.util.IdentityMap$Entries entries
    private com.esotericsoftware.kryo.util.IdentityMap$Values values
    private com.esotericsoftware.kryo.util.IdentityMap$Keys keys
    private static final int PRIME1
    private static final int PRIME2
    private static final int PRIME3
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeShortField
com.badlogic.gdx.math.collision.Ray
    public com.badlogic.gdx.math.collision.Ray cpy()
    public com.badlogic.gdx.math.Vector3 getEndPoint(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.collision.Ray mul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.collision.Ray set(float,float,float,float,float,float)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.collision.Ray)
    private static final long serialVersionUID
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData
com.esotericsoftware.kryo.util.ObjectMap$MapIterator
com.badlogic.gdx.scenes.scene2d.Event
    public void setBubbles(boolean)
    public boolean isCapture()
com.badlogic.gdx.backends.android.ZipResourceFile
    private static int swapEndian(int)
    private static int swapEndian(short)
    public void <init>(java.lang.String)
    private static int read4LE(java.io.RandomAccessFile)
    public com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getAllEntries()
    void addPatchFile(java.lang.String)
    private java.util.HashMap mHashMap
    public java.util.HashMap mZipFiles
    java.nio.ByteBuffer mLEByteBuffer
    static final java.lang.String LOG_TAG
    static final boolean LOGV
    static final int kEOCDSignature
    static final int kEOCDLen
    static final int kEOCDNumEntries
    static final int kEOCDSize
    static final int kEOCDFileOffset
    static final int kMaxCommentLen
    static final int kMaxEOCDSearch
    static final int kLFHSignature
    static final int kLFHLen
    static final int kLFHNameLen
    static final int kLFHExtraLen
    static final int kCDESignature
    static final int kCDELen
    static final int kCDEMethod
    static final int kCDEModWhen
    static final int kCDECRC
    static final int kCDECompLen
    static final int kCDEUncompLen
    static final int kCDENameLen
    static final int kCDEExtraLen
    static final int kCDECommentLen
    static final int kCDELocalOffset
    static final int kCompressStored
    static final int kCompressDeflated
    static final int kZipEntryAdj
com.badlogic.gdx.utils.async.AsyncExecutor$2
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random
com.badlogic.gdx.utils.FlushablePool
com.esotericsoftware.kryonet.EndPoint
    public abstract com.esotericsoftware.kryonet.Serialization getSerialization()
    public abstract void addListener(com.esotericsoftware.kryonet.Listener)
    public abstract void removeListener(com.esotericsoftware.kryonet.Listener)
    public abstract void run()
    public abstract void start()
    public abstract void stop()
    public abstract void close()
    public abstract void update(int)
    public abstract java.lang.Thread getUpdateThread()
    public abstract com.esotericsoftware.kryo.Kryo getKryo()
com.badlogic.gdx.utils.compression.CRC
com.badlogic.gdx.backends.android.AsynchronousSound$3
com.esotericsoftware.kryo.serializers.DefaultSerializers
com.badlogic.gdx.graphics.g2d.PolygonRegion
com.badlogic.gdx.assets.loaders.TextureAtlasLoader
com.badlogic.gdx.graphics.OrthographicCamera
    public void <init>(float,float)
    public void setToOrtho(boolean)
    public void rotate(float)
    public void translate(float,float)
    public void translate(com.badlogic.gdx.math.Vector2)
com.esotericsoftware.kryo.serializers.JavaSerializer
org.objenesis.instantiator.perc.PercInstantiator
com.badlogic.gdx.graphics.g3d.utils.CameraInputController
com.badlogic.gdx.graphics.PerspectiveCamera
com.badlogic.gdx.utils.LongQueue
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider
com.badlogic.gdx.graphics.glutils.IndexBufferObject
    public void <init>(int)
    public void <init>(boolean,java.nio.ByteBuffer)
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData
    public void setLineHeight(float)
    public java.lang.String getImagePath(int)
    public java.lang.String[] getImagePaths()
    public com.badlogic.gdx.files.FileHandle getFontFile()
    public void scale(float)
com.badlogic.gdx.scenes.scene2d.ui.Window$3
    public boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.esotericsoftware.kryo.io.UnsafeMemoryInput
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect
com.badlogic.gdx.backends.android.AndroidFileHandle
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
    public long lastModified()
com.badlogic.gdx.graphics.g3d.environment.BaseLight
com.badlogic.gdx.graphics.glutils.VertexData
    public abstract int getNumMaxVertices()
    public abstract void updateVertices(int,float[],int,int)
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.math.Quaternion
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,float)
    public static final float len(float,float,float,float)
    public static final float len2(float,float,float,float)
    public static final float dot(float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion cpy()
    public float len()
    public com.badlogic.gdx.math.Quaternion setEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Quaternion setEulerAnglesRad(float,float,float)
    public int getGimbalPole()
    public float getRollRad()
    public float getRoll()
    public float getPitchRad()
    public float getPitch()
    public float getYawRad()
    public float getYaw()
    public float len2()
    public com.badlogic.gdx.math.Quaternion nor()
    public com.badlogic.gdx.math.Quaternion conjugate()
    public com.badlogic.gdx.math.Vector3 transform(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Quaternion mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion mul(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mulLeft(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion mulLeft(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion add(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion add(float,float,float,float)
    public void toMatrix(float[])
    public boolean isIdentity()
    public boolean isIdentity(float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromAxes(float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxes(boolean,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromCross(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Quaternion setFromCross(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion,float)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[])
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[],float[])
    public com.badlogic.gdx.math.Quaternion exp(float)
    public float dot(com.badlogic.gdx.math.Quaternion)
    public float dot(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mul(float)
    public float getAxisAngle(com.badlogic.gdx.math.Vector3)
    public float getAxisAngleRad(com.badlogic.gdx.math.Vector3)
    public float getAngleRad()
    public float getAngle()
    public void getSwingTwist(float,float,float,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public void getSwingTwist(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public float getAngleAroundRad(float,float,float)
    public float getAngleAroundRad(com.badlogic.gdx.math.Vector3)
    public float getAngleAround(float,float,float)
    public float getAngleAround(com.badlogic.gdx.math.Vector3)
    private static final long serialVersionUID
com.badlogic.gdx.graphics.g2d.NinePatch
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public void <init>(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.graphics.Color)
    public void <init>(com.badlogic.gdx.graphics.Texture)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.Color)
    public varargs void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion[])
    public void <init>(com.badlogic.gdx.graphics.g2d.NinePatch)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public com.badlogic.gdx.graphics.Color getColor()
    public void setLeftWidth(float)
    public void setRightWidth(float)
    public void setTopHeight(float)
    public void setBottomHeight(float)
    public float getMiddleWidth()
    public void setMiddleWidth(float)
    public float getMiddleHeight()
    public void setMiddleHeight(float)
    public void setPadLeft(float)
    public void setPadRight(float)
    public void setPadTop(float)
    public void setPadBottom(float)
    public com.badlogic.gdx.graphics.Texture getTexture()
    public static final int TOP_LEFT
    public static final int TOP_CENTER
    public static final int TOP_RIGHT
    public static final int MIDDLE_LEFT
    public static final int MIDDLE_CENTER
    public static final int MIDDLE_RIGHT
    public static final int BOTTOM_LEFT
    public static final int BOTTOM_CENTER
    public static final int BOTTOM_RIGHT
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData
    public void <init>(int)
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.Pixmap$1$1
com.badlogic.gdx.utils.IntFloatMap$Keys
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeStringField
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation
com.badlogic.gdx.graphics.g3d.ModelCache
com.esotericsoftware.kryonet.TcpConnection
    private static final int IPTOS_LOWDELAY
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute
org.objenesis.instantiator.android.Android18Instantiator
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder
com.badlogic.gdx.graphics.g3d.ModelCache$2
com.badlogic.gdx.utils.SerializationException
    public void <init>()
    private boolean causedBy(java.lang.Throwable,java.lang.Class)
    public boolean causedBy(java.lang.Class)
com.badlogic.gdx.scenes.scene2d.actions.AfterAction
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public com.badlogic.gdx.utils.Array getActions()
org.objenesis.instantiator.gcj.GCJSerializationInstantiator
com.badlogic.gdx.utils.viewport.FillViewport
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo
com.badlogic.gdx.utils.IntIntMap
org.objenesis.Objenesis
com.esotericsoftware.kryo.KryoException
    public void <init>()
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader
com.badlogic.gdx.utils.ObjectIntMap$Keys
com.esotericsoftware.kryonet.util.TcpIdleSender
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config
org.objenesis.instantiator.jrockit.JRockitLegacyInstantiator
com.badlogic.gdx.graphics.glutils.IndexData
    public abstract void setIndices(java.nio.ShortBuffer)
    public abstract void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter
com.badlogic.gdx.backends.android.AndroidFragmentApplication
com.esotericsoftware.kryo.io.Input
    public void <init>(int)
    public void <init>(byte[])
    public void <init>(byte[],int,int)
    public void <init>(java.io.InputStream)
    public void <init>(java.io.InputStream,int)
    private int optional(int)
    private int readInt_slow(boolean)
    private int readUtf8Length(int)
    private int readUtf8Length_slow(int)
    private void readUtf8(int)
    private void readUtf8_slow(int,int)
    private java.lang.String readAscii()
    private java.lang.String readAscii_slow()
    private long readLong_slow(boolean)
    public void setBuffer(byte[])
    public void setBuffer(byte[],int,int)
    public byte[] getBuffer()
    public java.io.InputStream getInputStream()
    public void setInputStream(java.io.InputStream)
    public long total()
    public void setTotal(int)
    public void setPosition(int)
    public final int limit()
    public void setLimit(int)
    public void rewind()
    protected int fill(byte[],int,int)
    public boolean eof()
    public int read(byte[])
    public int read(byte[],int,int)
    public long skip(long)
    public void close()
    public int readByteUnsigned()
    public void readBytes(byte[])
    public void readBytes(byte[],int,int)
    public boolean canReadInt()
    public boolean canReadLong()
    public float readFloat(float,boolean)
    public int readShortUnsigned()
    public long readVarLong(boolean)
    public double readDouble(double,boolean)
    public int[] readInts(int)
    public long[] readLongs(int)
    protected byte[] buffer
org.objenesis.instantiator.sun.SunReflectionFactoryHelper
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction
org.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide
com.badlogic.gdx.scenes.scene2d.actions.EventAction
com.esotericsoftware.kryo.util.IntMap$Values
com.badlogic.gdx.backends.android.AndroidGL30
    public void glReadBuffer(int)
    public void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public void glDrawRangeElements(int,int,int,int,int,int)
    public void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public void glGenQueries(int,int[],int)
    public void glGenQueries(int,java.nio.IntBuffer)
    public void glDeleteQueries(int,int[],int)
    public void glDeleteQueries(int,java.nio.IntBuffer)
    public boolean glIsQuery(int)
    public void glBeginQuery(int,int)
    public void glEndQuery(int)
    public void glGetQueryiv(int,int,java.nio.IntBuffer)
    public void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public boolean glUnmapBuffer(int)
    public java.nio.Buffer glGetBufferPointerv(int,int)
    public void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public void glRenderbufferStorageMultisample(int,int,int,int,int)
    public void glFramebufferTextureLayer(int,int,int,int,int)
    public java.nio.Buffer glMapBufferRange(int,int,int,int)
    public void glFlushMappedBufferRange(int,int,int)
    public void glDeleteVertexArrays(int,int[],int)
    public void glGenVertexArrays(int,int[],int)
    public boolean glIsVertexArray(int)
    public void glBeginTransformFeedback(int)
    public void glEndTransformFeedback()
    public void glBindBufferRange(int,int,int,int,int)
    public void glBindBufferBase(int,int,int)
    public void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public void glVertexAttribIPointer(int,int,int,int,int)
    public void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public void glVertexAttribI4i(int,int,int,int,int)
    public void glVertexAttribI4ui(int,int,int,int,int)
    public void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public int glGetFragDataLocation(int,java.lang.String)
    public void glUniform1uiv(int,int,java.nio.IntBuffer)
    public void glUniform3uiv(int,int,java.nio.IntBuffer)
    public void glUniform4uiv(int,int,java.nio.IntBuffer)
    public void glClearBufferiv(int,int,java.nio.IntBuffer)
    public void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public void glClearBufferfi(int,int,float,int)
    public java.lang.String glGetStringi(int,int)
    public void glCopyBufferSubData(int,int,int,int,int)
    public void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public int glGetUniformBlockIndex(int,java.lang.String)
    public void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public java.lang.String glGetActiveUniformBlockName(int,int)
    public void glUniformBlockBinding(int,int,int)
    public void glGetInteger64v(int,java.nio.LongBuffer)
    public void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public void glGenSamplers(int,int[],int)
    public void glGenSamplers(int,java.nio.IntBuffer)
    public void glDeleteSamplers(int,int[],int)
    public void glDeleteSamplers(int,java.nio.IntBuffer)
    public boolean glIsSampler(int)
    public void glBindSampler(int,int)
    public void glSamplerParameteri(int,int,int)
    public void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public void glSamplerParameterf(int,int,float)
    public void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glVertexAttribDivisor(int,int)
    public void glBindTransformFeedback(int,int)
    public void glDeleteTransformFeedbacks(int,int[],int)
    public void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public void glGenTransformFeedbacks(int,int[],int)
    public void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public boolean glIsTransformFeedback(int)
    public void glPauseTransformFeedback()
    public void glResumeTransformFeedback()
    public void glProgramParameteri(int,int,int)
    public void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
com.badlogic.gdx.graphics.profiling.GLErrorListener
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeRegionField
com.badlogic.gdx.graphics.g3d.particles.ParticleShader
com.badlogic.gdx.graphics.Pixmap$1
com.esotericsoftware.kryo.util.FastestStreamFactory
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single
com.badlogic.gdx.math.collision.Segment
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite
com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer
com.badlogic.gdx.graphics.VertexAttributes$Usage
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction
com.badlogic.gdx.utils.GdxNativesLoader
    public void <init>()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter
com.badlogic.gdx.Net$Protocol
com.badlogic.gdx.assets.loaders.MusicLoader
com.badlogic.gdx.Audio
    public abstract com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public abstract com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
    public abstract com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
    public abstract com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver
com.esotericsoftware.kryonet.Listener$QueuedListener
com.badlogic.gdx.utils.SortedIntList$NodePool
com.badlogic.gdx.math.Intersector
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch
com.badlogic.gdx.InputEventQueue
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2
com.badlogic.gdx.graphics.g3d.environment.PointLight
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer
com.badlogic.gdx.utils.ObjectIntMap
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectIntMap)
    public int put(java.lang.Object,int,int)
    public void putAll(com.badlogic.gdx.utils.ObjectIntMap)
    public int getAndIncrement(java.lang.Object,int,int)
    public int remove(java.lang.Object,int)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public void clear()
    public boolean containsValue(int)
    public java.lang.Object findKey(int)
    public void ensureCapacity(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectIntMap$Values values()
    public com.badlogic.gdx.utils.ObjectIntMap$Keys keys()
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values1
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values2
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys2
com.esotericsoftware.kryonet.Listener$QueuedListener$3
com.badlogic.gdx.scenes.scene2d.utils.DragListener
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData
com.badlogic.gdx.scenes.scene2d.ui.Skin$1
    private static final java.lang.String parentFieldName
com.badlogic.gdx.utils.OrderedMap
    public void <init>(int,float)
    public void <init>(com.badlogic.gdx.utils.OrderedMap)
    public void putAll(com.badlogic.gdx.utils.OrderedMap)
    public boolean alter(java.lang.Object,java.lang.Object)
    public boolean alterIndex(int,java.lang.Object)
    public void clear(int)
    public com.badlogic.gdx.utils.Array orderedKeys()
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1
com.badlogic.gdx.math.Frustum
    public boolean pointInFrustum(com.badlogic.gdx.math.Vector3)
    public boolean pointInFrustum(float,float,float)
    public boolean sphereInFrustum(com.badlogic.gdx.math.Vector3,float)
    public boolean sphereInFrustum(float,float,float,float)
    public boolean sphereInFrustumWithoutNearFar(com.badlogic.gdx.math.Vector3,float)
    public boolean sphereInFrustumWithoutNearFar(float,float,float,float)
    public boolean boundsInFrustum(com.badlogic.gdx.math.collision.BoundingBox)
    public boolean boundsInFrustum(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public boolean boundsInFrustum(float,float,float,float,float,float)
com.badlogic.gdx.utils.GdxRuntimeException
    private static final long serialVersionUID
com.badlogic.gdx.graphics.g2d.Sprite
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
    public void setPosition(float,float)
    public void setOriginBasedPosition(float,float)
    public void setX(float)
    public void setY(float)
    public void setCenterX(float)
    public void setCenterY(float)
    public void setCenter(float,float)
    public void translateX(float)
    public void translateY(float)
    public void setAlpha(float)
    public void setOriginCenter()
    public float getRotation()
    public void rotate(float)
    public void scale(float)
    public com.badlogic.gdx.math.Rectangle getBoundingRectangle()
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public float getScaleX()
    public float getScaleY()
    public void setU(float)
    public void setV(float)
    public void setU2(float)
    public void setV2(float)
    public void setFlip(boolean,boolean)
    public void scroll(float,float)
    private com.badlogic.gdx.math.Rectangle bounds
    static final int VERTEX_SIZE
    static final int SPRITE_SIZE
com.badlogic.gdx.utils.ObjectSet
    public void <init>(com.badlogic.gdx.utils.ObjectSet)
    public static varargs com.badlogic.gdx.utils.ObjectSet with(java.lang.Object[])
    public void addAll(com.badlogic.gdx.utils.Array)
    public void addAll(com.badlogic.gdx.utils.Array,int,int)
    public varargs boolean addAll(java.lang.Object[])
    public boolean addAll(java.lang.Object[],int,int)
    public void addAll(com.badlogic.gdx.utils.ObjectSet)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public java.lang.Object get(java.lang.Object)
com.badlogic.gdx.scenes.scene2d.InputEvent
    public void setTouchFocus(boolean)
com.esotericsoftware.kryo.Kryo
    public void <init>(com.esotericsoftware.kryo.ReferenceResolver)
    public void <init>(com.esotericsoftware.kryo.ClassResolver,com.esotericsoftware.kryo.ReferenceResolver)
    public void setDefaultSerializer(com.esotericsoftware.kryo.factories.SerializerFactory)
    public void setDefaultSerializer(java.lang.Class)
    public void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)
    public void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.factories.SerializerFactory)
    public com.esotericsoftware.kryo.Registration register(java.lang.Class,int)
    public com.esotericsoftware.kryo.Registration register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)
    public com.esotericsoftware.kryo.Registration register(com.esotericsoftware.kryo.Registration)
    public com.esotericsoftware.kryo.Registration getRegistration(int)
    public void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)
    public void writeObjectOrNull(com.esotericsoftware.kryo.io.Output,java.lang.Object,java.lang.Class)
    public java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)
    public java.lang.Object readObjectOrNull(com.esotericsoftware.kryo.io.Input,java.lang.Class)
    public java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Serializer)
    public java.lang.Object copyShallow(java.lang.Object)
    public java.lang.Object copyShallow(java.lang.Object,com.esotericsoftware.kryo.Serializer)
    public com.esotericsoftware.kryo.ClassResolver getClassResolver()
    public void setClassLoader(java.lang.ClassLoader)
    public void setCopyReferences(boolean)
    public void setReferenceResolver(com.esotericsoftware.kryo.ReferenceResolver)
    public void setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
    public org.objenesis.strategy.InstantiatorStrategy getInstantiatorStrategy()
    public com.esotericsoftware.kryo.util.ObjectMap getGraphContext()
    public com.esotericsoftware.kryo.util.IdentityMap getOriginalToCopyMap()
    public void setAutoReset(boolean)
    public void setMaxDepth(int)
    public com.esotericsoftware.kryo.StreamFactory getStreamFactory()
    public void setStreamFactory(com.esotericsoftware.kryo.StreamFactory)
    public void setAsmEnabled(boolean)
    public static final byte NULL
    public static final byte NOT_NULL
    private static final int REF
    private static final int NO_REF
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO
    public void <init>(java.lang.String,java.io.File,java.lang.String)
    public void setOffsetFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer)
    public long getOffset()
    public boolean isUncompressed()
    public android.content.res.AssetFileDescriptor getAssetFileDescriptor()
    public java.lang.String getZipFileName()
    public java.io.File getZipFile()
    public final java.io.File mFile
    public final java.lang.String mFileName
    public final java.lang.String mZipFileName
    public long mLocalHdrOffset
    public int mMethod
    public long mWhenModified
    public long mCRC32
    public long mCompressedLength
    public long mUncompressedLength
    public long mOffset
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField
com.badlogic.gdx.assets.loaders.CubemapLoader
com.badlogic.gdx.graphics.profiling.GLProfiler
com.badlogic.gdx.utils.JsonWriter$JsonObject
com.badlogic.gdx.graphics.g3d.model.NodePart
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7
com.badlogic.gdx.utils.Timer$Task
    public synchronized long getExecuteTimeMillis()
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer
com.badlogic.gdx.graphics.g3d.particles.ParallelArray
com.badlogic.gdx.math.Vector
    public abstract com.badlogic.gdx.math.Vector cpy()
    public abstract float len()
    public abstract float len2()
    public abstract com.badlogic.gdx.math.Vector limit(float)
    public abstract com.badlogic.gdx.math.Vector limit2(float)
    public abstract com.badlogic.gdx.math.Vector setLength(float)
    public abstract com.badlogic.gdx.math.Vector setLength2(float)
    public abstract com.badlogic.gdx.math.Vector clamp(float,float)
    public abstract com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public abstract com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
    public abstract com.badlogic.gdx.math.Vector nor()
    public abstract com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public abstract float dot(com.badlogic.gdx.math.Vector)
    public abstract com.badlogic.gdx.math.Vector scl(float)
    public abstract com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public abstract float dst(com.badlogic.gdx.math.Vector)
    public abstract float dst2(com.badlogic.gdx.math.Vector)
    public abstract com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public abstract com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public abstract com.badlogic.gdx.math.Vector setToRandomDirection()
    public abstract boolean isUnit()
    public abstract boolean isUnit(float)
    public abstract boolean isZero()
    public abstract boolean isZero(float)
    public abstract boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public abstract boolean isOnLine(com.badlogic.gdx.math.Vector)
    public abstract boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public abstract boolean isCollinear(com.badlogic.gdx.math.Vector)
    public abstract boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public abstract boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public abstract boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public abstract boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public abstract boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public abstract boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public abstract boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public abstract com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public abstract com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public abstract com.badlogic.gdx.math.Vector setZero()
com.esotericsoftware.jsonbeans.Json
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter
com.esotericsoftware.jsonbeans.Json$FieldMetadata
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder
com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory
    public void <init>()
com.esotericsoftware.jsonbeans.JsonWriter$JsonObject
com.badlogic.gdx.backends.android.AndroidDaydream
com.badlogic.gdx.graphics.glutils.MipMapTextureData
com.badlogic.gdx.utils.viewport.FitViewport
com.badlogic.gdx.backends.android.AndroidWallpaperListener
com.badlogic.gdx.utils.ByteArray
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.utils.Json$ReadOnlySerializer
    public void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
    public abstract java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D
com.badlogic.gdx.math.collision.BoundingBox
com.esotericsoftware.kryo.serializers.AsmCacheFields
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction
com.badlogic.gdx.Graphics$GraphicsType
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver
com.badlogic.gdx.graphics.glutils.KTXTextureData
    public int getNumberOfMipMapLevels()
    public int getNumberOfFaces()
    public int getGlInternalFormat()
    public java.nio.ByteBuffer getData(int,int)
    private static final int GL_TEXTURE_1D
    private static final int GL_TEXTURE_3D
    private static final int GL_TEXTURE_1D_ARRAY_EXT
    private static final int GL_TEXTURE_2D_ARRAY_EXT
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single
com.badlogic.gdx.math.Bresenham2
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder
com.badlogic.gdx.maps.tiled.TiledMapImageLayer
com.badlogic.gdx.utils.XmlReader
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeObjectField
com.esotericsoftware.kryo.serializers.BeanSerializer$1
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer
com.esotericsoftware.kryo.util.ListReferenceResolver
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion
com.badlogic.gdx.utils.reflect.Annotation
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable
    public void setPadding(float,float,float,float)
    public void setMinSize(float,float)
com.esotericsoftware.jsonbeans.JsonValue$JsonIterator
com.badlogic.gdx.graphics.g3d.Environment
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer
com.badlogic.gdx.assets.AssetLoadingTask
com.badlogic.gdx.math.CatmullRomSpline
com.badlogic.gdx.graphics.FPSLogger
com.badlogic.gdx.math.EarClippingTriangulator
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction
com.badlogic.gdx.utils.JsonReader
    public com.badlogic.gdx.utils.JsonValue parse(java.lang.String)
    public com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
    static final int json_start
    static final int json_first_final
    static final int json_error
    static final int json_en_object
    static final int json_en_array
    static final int json_en_main
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel
com.badlogic.gdx.graphics.glutils.VertexArray
    public varargs void <init>(int,com.badlogic.gdx.graphics.VertexAttribute[])
    public java.nio.FloatBuffer getBuffer()
    public int getNumMaxVertices()
    public void updateVertices(int,float[],int,int)
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.esotericsoftware.kryo.StreamFactory
    public abstract com.esotericsoftware.kryo.io.Input getInput()
    public abstract com.esotericsoftware.kryo.io.Input getInput(int)
    public abstract com.esotericsoftware.kryo.io.Input getInput(byte[])
    public abstract com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)
    public abstract com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)
    public abstract com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)
    public abstract com.esotericsoftware.kryo.io.Output getOutput()
    public abstract com.esotericsoftware.kryo.io.Output getOutput(int)
    public abstract com.esotericsoftware.kryo.io.Output getOutput(int,int)
    public abstract com.esotericsoftware.kryo.io.Output getOutput(byte[])
    public abstract com.esotericsoftware.kryo.io.Output getOutput(byte[],int)
    public abstract com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)
    public abstract com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)
com.badlogic.gdx.graphics.Mesh
    protected void <init>(com.badlogic.gdx.graphics.glutils.VertexData,com.badlogic.gdx.graphics.glutils.IndexData,boolean)
    public void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public void <init>(boolean,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public static void transform(com.badlogic.gdx.math.Matrix4,float[],int,int,int,int,int)
    public static void transformUV(com.badlogic.gdx.math.Matrix3,float[],int,int,int,int)
    public varargs com.badlogic.gdx.graphics.Mesh enableInstancedRendering(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public com.badlogic.gdx.graphics.Mesh disableInstancedRendering()
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[],int,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[])
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[],int,int)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public com.badlogic.gdx.graphics.Mesh setVertices(float[])
    public boolean isInstanced()
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[],int,int)
    public float[] getVertices(float[])
    public float[] getVertices(int,float[])
    public float[] getVertices(int,int,float[])
    public float[] getVertices(int,int,float[],int)
    public com.badlogic.gdx.graphics.Mesh setIndices(short[],int,int)
    public void getIndices(short[])
    public void getIndices(short[],int)
    public void getIndices(int,short[],int)
    public void getIndices(int,int,short[],int)
    public int getMaxVertices()
    public int getMaxIndices()
    public int getVertexSize()
    public void setAutoBind(boolean)
    public java.nio.FloatBuffer getVerticesBuffer()
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox()
    public void calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadiusSquared(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadius(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadius(float,float,float,int,int)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int)
    public float calculateRadius(float,float,float)
    public float calculateRadius(com.badlogic.gdx.math.Vector3)
    public void scale(float,float,float)
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void transform(com.badlogic.gdx.math.Matrix4,int,int)
    public void transformUV(com.badlogic.gdx.math.Matrix3)
    protected void transformUV(com.badlogic.gdx.math.Matrix3,int,int)
    public com.badlogic.gdx.graphics.Mesh copy(boolean,boolean,int[])
    public com.badlogic.gdx.graphics.Mesh copy(boolean)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool
com.badlogic.gdx.math.Plane$PlaneSide
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy
org.objenesis.instantiator.basic.ObjectInputStreamInstantiator
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy
    public void sort(com.badlogic.gdx.utils.Array)
    java.util.Comparator comparator
org.objenesis.strategy.SingleInstantiatorStrategy
com.badlogic.gdx.maps.tiled.TiledMapTileSets
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection
    public boolean getRangeSelect()
    public void setRangeSelect(boolean)
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter
com.badlogic.gdx.utils.SortedIntList
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3
com.badlogic.gdx.utils.compression.rangecoder.Encoder
com.badlogic.gdx.math.Vector2
    public void <init>(com.badlogic.gdx.math.Vector2)
    public static float len(float,float)
    public static float len2(float,float)
    public static float dot(float,float,float,float)
    public static float dst(float,float,float,float)
    public static float dst2(float,float,float,float)
    public com.badlogic.gdx.math.Vector2 cpy()
    public float len2()
    public com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2)
    public float dot(com.badlogic.gdx.math.Vector2)
    public float dot(float,float)
    public com.badlogic.gdx.math.Vector2 scl(float,float)
    public com.badlogic.gdx.math.Vector2 scl(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public float dst(float,float)
    public float dst2(com.badlogic.gdx.math.Vector2)
    public float dst2(float,float)
    public com.badlogic.gdx.math.Vector2 limit(float)
    public com.badlogic.gdx.math.Vector2 limit2(float)
    public com.badlogic.gdx.math.Vector2 clamp(float,float)
    public com.badlogic.gdx.math.Vector2 setLength(float)
    public com.badlogic.gdx.math.Vector2 setLength2(float)
    public com.badlogic.gdx.math.Vector2 fromString(java.lang.String)
    public com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Matrix3)
    public float crs(com.badlogic.gdx.math.Vector2)
    public float crs(float,float)
    public float angle()
    public float angle(com.badlogic.gdx.math.Vector2)
    public float angleDeg()
    public float angleDeg(com.badlogic.gdx.math.Vector2)
    public float angleRad()
    public float angleRad(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 setAngle(float)
    public com.badlogic.gdx.math.Vector2 setAngleDeg(float)
    public com.badlogic.gdx.math.Vector2 setAngleRad(float)
    public com.badlogic.gdx.math.Vector2 rotate(float)
    public com.badlogic.gdx.math.Vector2 rotateAround(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateDeg(float)
    public com.badlogic.gdx.math.Vector2 rotateRad(float)
    public com.badlogic.gdx.math.Vector2 rotateAroundDeg(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateAroundRad(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotate90(int)
    public com.badlogic.gdx.math.Vector2 lerp(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 interpolate(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Interpolation)
    public com.badlogic.gdx.math.Vector2 setToRandomDirection()
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2,float)
    public boolean epsilonEquals(float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2)
    public boolean epsilonEquals(float,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2,float)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2,float)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2,float)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector2)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    private static final long serialVersionUID
com.esotericsoftware.minlog.Log
    public static void set(int)
    public static void NONE()
    public static void ERROR()
    public static void WARN()
    public static void INFO()
    public static void DEBUG()
    public static void TRACE()
    public static void setLogger(com.esotericsoftware.minlog.Log$Logger)
    public static void error(java.lang.String,java.lang.Throwable)
    public static void error(java.lang.String)
    public static void error(java.lang.String,java.lang.String)
    public static void warn(java.lang.String,java.lang.Throwable)
    public static void warn(java.lang.String)
    public static void warn(java.lang.String,java.lang.String)
    public static void info(java.lang.String,java.lang.Throwable)
    public static void info(java.lang.String,java.lang.String,java.lang.Throwable)
    public static void debug(java.lang.String,java.lang.Throwable)
    public static void debug(java.lang.String)
    public static void trace(java.lang.String,java.lang.Throwable)
    public static void trace(java.lang.String)
    private void <init>()
    public static final int LEVEL_NONE
    public static final int LEVEL_ERROR
    public static final int LEVEL_WARN
    public static final int LEVEL_INFO
    public static final int LEVEL_DEBUG
    public static final int LEVEL_TRACE
com.badlogic.gdx.graphics.g3d.Shader
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder
org.objenesis.strategy.SerializingInstantiatorStrategy
com.badlogic.gdx.graphics.Cursor$SystemCursor
com.badlogic.gdx.graphics.g3d.Material
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo
com.tastygamesstudio.phone.FreeTypeSkinLoader
com.esotericsoftware.kryo.util.IdentityMap$Entries
org.objenesis.ObjenesisSerializer
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter
com.badlogic.gdx.graphics.glutils.ETC1TextureData
    public void <init>(com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,boolean)
com.badlogic.gdx.graphics.Pixmap$Format
    public static int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format)
    public static int toGlType(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue
    public float[] getTimeline()
    public void setTimeline(float[])
    public float[] getColors()
    public void setColors(float[])
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue)
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4
com.esotericsoftware.kryo.io.ByteBufferInput
    public void <init>(int)
    public void <init>(byte[])
    public void <init>(java.nio.ByteBuffer)
    public void <init>(java.io.InputStream)
    public void <init>(java.io.InputStream,int)
    public void <init>(long,int)
    public java.nio.ByteOrder order()
    public void order(java.nio.ByteOrder)
    public void setBuffer(byte[])
    public void release()
    public java.nio.ByteBuffer getByteBuffer()
    public java.io.InputStream getInputStream()
    public void setInputStream(java.io.InputStream)
    public void rewind()
    public int readByteUnsigned()
    public void readBytes(byte[])
    public boolean canReadInt()
    public boolean canReadLong()
    public float readFloat(float,boolean)
    public int readShortUnsigned()
    public double readDouble(double,boolean)
    public int[] readInts(int)
    public long[] readLongs(int)
    public boolean getVarIntsEnabled()
    public void setVarIntsEnabled(boolean)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27
com.badlogic.gdx.utils.IntMap
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntMap)
    public void putAll(com.badlogic.gdx.utils.IntMap)
    public java.lang.Object remove(int)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public void clear()
    public boolean containsValue(java.lang.Object,boolean)
    public boolean containsKey(int)
    public int findKey(java.lang.Object,boolean,int)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public com.badlogic.gdx.utils.IntMap$Values values()
    public com.badlogic.gdx.utils.IntMap$Keys keys()
    private transient com.badlogic.gdx.utils.IntMap$Values values1
    private transient com.badlogic.gdx.utils.IntMap$Values values2
    private transient com.badlogic.gdx.utils.IntMap$Keys keys1
    private transient com.badlogic.gdx.utils.IntMap$Keys keys2
com.badlogic.gdx.graphics.g3d.utils.RenderContext
com.badlogic.gdx.math.DelaunayTriangulator
com.badlogic.gdx.ApplicationAdapter
com.badlogic.gdx.assets.AssetDescriptor
com.badlogic.gdx.utils.async.AsyncExecutor
com.badlogic.gdx.math.FloatCounter
com.esotericsoftware.kryonet.rmi.ObjectSpace$1
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction
com.badlogic.gdx.utils.ScreenUtils
    public void <init>()
    public static void clear(com.badlogic.gdx.graphics.Color)
    public static void clear(com.badlogic.gdx.graphics.Color,boolean)
    public static com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture()
    public static com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture(int,int,int,int)
    public static com.badlogic.gdx.graphics.Pixmap getFrameBufferPixmap(int,int,int,int)
    public static byte[] getFrameBufferPixels(boolean)
com.badlogic.gdx.backends.android.AndroidApplicationBase
    public abstract void runOnUiThread(java.lang.Runnable)
    public abstract void startActivity(android.content.Intent)
    public abstract com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public abstract com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public static final int MINIMUM_SDK
com.badlogic.gdx.net.NetJavaImpl
    public void <init>()
    public void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    synchronized void removeFromConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest)
    synchronized void putIntoConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener,java.net.HttpURLConnection)
    synchronized com.badlogic.gdx.Net$HttpResponseListener getFromListeners(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.graphics.glutils.FileTextureArrayData
com.tastygamesstudio.phone.FreeTypeFontParametersDeserializer
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener
    public com.badlogic.gdx.scenes.scene2d.Actor getTouchDownTarget()
com.esotericsoftware.kryo.serializers.BlowfishSerializer$1
com.esotericsoftware.kryonet.Listener$ReflectionListener
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics
    private static native int getXppem(long)
    private static native int getYppem(long)
    private static native int getXscale(long)
    private static native int getYscale(long)
    private static native int getMaxAdvance(long)
    public int getXppem()
    public int getYppem()
    public int getXScale()
    public int getYscale()
    public int getMaxAdvance()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data
    public void write(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1
com.badlogic.gdx.ApplicationLogger
    public abstract void error(java.lang.String,java.lang.String,java.lang.Throwable)
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.utils.Predicate$PredicateIterator
com.badlogic.gdx.math.Matrix4
    public void <init>(com.badlogic.gdx.math.Matrix4)
    public void <init>(float[])
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public static native void mulVec(float[],float[],int,int,int)
    public static native void rot(float[],float[],int,int,int)
    public static void mulVec(float[],float[])
    public static void prj(float[],float[])
    public static void rot(float[],float[])
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 cpy()
    public com.badlogic.gdx.math.Matrix4 trn(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 trn(float,float,float)
    public float[] getValues()
    public com.badlogic.gdx.math.Matrix4 mulLeft(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Matrix4 tra()
    public com.badlogic.gdx.math.Matrix4 inv()
    public float det()
    public float det3x3()
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setTranslation(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAnglesRad(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToScaling(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToScaling(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToWorld(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 lerp(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[])
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[],float[])
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Matrix4 scl(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 scl(float,float,float)
    public com.badlogic.gdx.math.Matrix4 scl(float)
    public com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion,boolean)
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion)
    public float getScaleXSquared()
    public float getScaleYSquared()
    public float getScaleZSquared()
    public float getScaleX()
    public float getScaleY()
    public float getScaleZ()
    public com.badlogic.gdx.math.Vector3 getScale(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 toNormalMatrix()
    public com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 translate(float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateTowardDirection(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateTowardTarget(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 scale(float,float,float)
    public void extract4x3Matrix(float[])
    public boolean hasRotationOrScaling()
    private static final long serialVersionUID
    public static final int M00
    public static final int M01
    public static final int M02
    public static final int M03
    public static final int M10
    public static final int M11
    public static final int M12
    public static final int M13
    public static final int M20
    public static final int M21
    public static final int M22
    public static final int M23
    public static final int M30
    public static final int M31
    public static final int M32
    public static final int M33
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer
com.badlogic.gdx.math.GridPoint3
com.tastygamesstudio.phone.R$color
com.badlogic.gdx.utils.Clipboard
    public abstract boolean hasContents()
com.badlogic.gdx.maps.ImageResolver
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo
com.badlogic.gdx.utils.Json$Serializable
    public abstract void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.ObjectMap$Keys
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryonet.rmi.RemoteObject
com.badlogic.gdx.backends.android.AsynchronousSound$4
com.badlogic.gdx.utils.reflect.Method
    public java.lang.Class getReturnType()
    public java.lang.Class[] getParameterTypes()
    public java.lang.Class getDeclaringClass()
    public boolean isAccessible()
    public void setAccessible(boolean)
    public boolean isAbstract()
    public boolean isDefaultAccess()
    public boolean isFinal()
    public boolean isPrivate()
    public boolean isProtected()
    public boolean isPublic()
    public boolean isNative()
    public boolean isStatic()
    public boolean isVarArgs()
    public boolean isAnnotationPresent(java.lang.Class)
    public com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
    public com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
com.badlogic.gdx.utils.QuickSelect
com.badlogic.gdx.graphics.PixmapIO
    public void <init>()
    public static void writeCIM(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,int,boolean)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.utils.DelayedRemovalArray
    public void <init>()
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(boolean,int,java.lang.Class)
    public void <init>(boolean,int)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Class)
    public void <init>(java.lang.Object[])
    public static varargs com.badlogic.gdx.utils.DelayedRemovalArray with(java.lang.Object[])
    public void insertRange(int,int)
    public void swap(int,int)
    public void shuffle()
    public java.lang.Object[] setSize(int)
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter
com.badlogic.gdx.utils.IntSet$IntSetIterator
com.badlogic.gdx.graphics.glutils.InstanceBufferObject
com.esotericsoftware.kryo.serializers.TaggedFieldSerializer$Tag
com.badlogic.gdx.graphics.g3d.Model
com.badlogic.gdx.maps.objects.RectangleMapObject
com.badlogic.gdx.backends.android.AndroidAudioDevice
com.badlogic.gdx.utils.compression.ICodeProgress
com.badlogic.gdx.graphics.g3d.shaders.DepthShader
com.esotericsoftware.kryo.serializers.DeflateSerializer
com.badlogic.gdx.backends.android.AndroidGraphics
    public com.badlogic.gdx.graphics.GL20 getGL20()
    public void setGL20(com.badlogic.gdx.graphics.GL20)
    public com.badlogic.gdx.graphics.GL30 getGL30()
    public void setGL30(com.badlogic.gdx.graphics.GL30)
    public long getFrameId()
    public com.badlogic.gdx.Graphics$GraphicsType getType()
    public com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public int getFramesPerSecond()
    public float getPpiX()
    public float getPpiY()
    public float getPpcX()
    public float getPpcY()
    public float getDensity()
    public boolean supportsDisplayModeChange()
    public boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public com.badlogic.gdx.Graphics$Monitor getMonitor()
    public com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public int getSafeInsetLeft()
    public int getSafeInsetTop()
    public int getSafeInsetBottom()
    public int getSafeInsetRight()
    public boolean setWindowedMode(int,int)
    public void setTitle(java.lang.String)
    public void setUndecorated(boolean)
    public void setResizable(boolean)
    public com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public void setVSync(boolean)
    public void setForegroundFPS(int)
    public boolean isFullscreen()
    public com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
    public void setCursor(com.badlogic.gdx.graphics.Cursor)
    public void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
    private static final java.lang.String LOG_TAG
com.badlogic.gdx.utils.ArrayMap$Entries
    public void reset()
com.badlogic.gdx.math.collision.Sphere
com.badlogic.gdx.AbstractInput
    public boolean isKeyJustPressed(int)
    public boolean isCatchBackKey()
    public void setCatchBackKey(boolean)
    public boolean isCatchMenuKey()
    public void setCatchMenuKey(boolean)
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26
com.tastygamesstudio.phone.R$drawable
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy
com.badlogic.gdx.utils.Json$Serializer
    public abstract void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteInvocationHandler$1
com.esotericsoftware.jsonbeans.JsonValue$PrettyPrintSettings
org.objenesis.ObjenesisHelper
org.objenesis.instantiator.basic.ObjectStreamClassInstantiator
com.badlogic.gdx.utils.compression.lz.InWindow
com.badlogic.gdx.assets.loaders.I18NBundleLoader
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20
    public void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
    public void <init>(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
    private static final boolean DEBUG
com.badlogic.gdx.maps.MapObject
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap
com.badlogic.gdx.utils.IntMap$Values
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
    private static final int EGL_OPENGL_ES2_BIT
    public static final int EGL_COVERAGE_BUFFERS_NV
    public static final int EGL_COVERAGE_SAMPLES_NV
    private static final java.lang.String TAG
com.badlogic.gdx.utils.ObjectFloatMap
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectFloatMap)
    public float put(java.lang.Object,float,float)
    public void putAll(com.badlogic.gdx.utils.ObjectFloatMap)
    public float getAndIncrement(java.lang.Object,float,float)
    public float remove(java.lang.Object,float)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public void clear()
    public boolean containsValue(float)
    public boolean containsValue(float,float)
    public java.lang.Object findKey(float)
    public java.lang.Object findKey(float,float)
    public void ensureCapacity(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectFloatMap$Values values()
    public com.badlogic.gdx.utils.ObjectFloatMap$Keys keys()
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values2
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys2
com.badlogic.gdx.utils.compression.rangecoder.Decoder
com.badlogic.gdx.utils.Predicate
com.badlogic.gdx.assets.loaders.PixmapLoader
com.badlogic.gdx.utils.ObjectMap$Values
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture
com.badlogic.gdx.graphics.Pixmap
    public static com.badlogic.gdx.graphics.Pixmap createFromFrameBuffer(int,int,int,int)
    public void <init>(byte[],int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap)
    public static void downloadFromUrl(java.lang.String,com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener)
    public void setFilter(com.badlogic.gdx.graphics.Pixmap$Filter)
    public void setColor(int)
    public void drawLine(int,int,int,int)
    public void drawRectangle(int,int,int,int)
    public void drawCircle(int,int,int)
    public void fillTriangle(int,int,int,int,int,int)
    public boolean isDisposed()
    public void drawPixel(int,int)
    public void setPixels(java.nio.ByteBuffer)
    public com.badlogic.gdx.graphics.Pixmap$Blending getBlending()
    public com.badlogic.gdx.graphics.Pixmap$Filter getFilter()
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem
com.badlogic.gdx.net.HttpRequestHeader
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters
com.badlogic.gdx.input.RemoteSender
com.badlogic.gdx.Input
    public abstract float getAccelerometerX()
    public abstract float getAccelerometerY()
    public abstract float getAccelerometerZ()
    public abstract float getGyroscopeX()
    public abstract float getGyroscopeY()
    public abstract float getGyroscopeZ()
    public abstract int getMaxPointers()
    public abstract int getX(int)
    public abstract int getDeltaX()
    public abstract int getDeltaX(int)
    public abstract int getY(int)
    public abstract int getDeltaY()
    public abstract int getDeltaY(int)
    public abstract boolean justTouched()
    public abstract float getPressure()
    public abstract float getPressure(int)
    public abstract boolean isButtonPressed(int)
    public abstract boolean isButtonJustPressed(int)
    public abstract boolean isKeyJustPressed(int)
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract void setOnscreenKeyboardVisible(boolean,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract void vibrate(int)
    public abstract void vibrate(long[],int)
    public abstract void cancelVibrate()
    public abstract float getAzimuth()
    public abstract float getPitch()
    public abstract float getRoll()
    public abstract void getRotationMatrix(float[])
    public abstract void setCatchBackKey(boolean)
    public abstract boolean isCatchBackKey()
    public abstract void setCatchMenuKey(boolean)
    public abstract boolean isCatchMenuKey()
    public abstract void setCatchKey(int,boolean)
    public abstract boolean isCatchKey(int)
    public abstract com.badlogic.gdx.InputProcessor getInputProcessor()
    public abstract boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
    public abstract int getRotation()
    public abstract com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public abstract void setCursorCatched(boolean)
    public abstract boolean isCursorCatched()
    public abstract void setCursorPosition(int,int)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable
    public com.badlogic.gdx.graphics.Color getColor()
    public float getScale()
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap
com.badlogic.gdx.utils.compression.Lzma
com.badlogic.gdx.utils.IntMap$Keys
com.badlogic.gdx.utils.LongMap
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.LongMap)
    public void putAll(com.badlogic.gdx.utils.LongMap)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public void clear()
    public boolean containsValue(java.lang.Object,boolean)
    public boolean containsKey(long)
    public long findKey(java.lang.Object,boolean,long)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public com.badlogic.gdx.utils.LongMap$Keys keys()
    private transient com.badlogic.gdx.utils.LongMap$Keys keys1
    private transient com.badlogic.gdx.utils.LongMap$Keys keys2
com.badlogic.gdx.utils.I18NBundle
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public int getNumMaxVertices()
    public java.nio.FloatBuffer getBuffer()
    public void updateVertices(int,float[],int,int)
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public int getBufferHandle()
com.badlogic.gdx.Net$HttpResponseListener
com.badlogic.gdx.graphics.g3d.model.MeshPart
com.badlogic.gdx.maps.objects.PolygonMapObject
com.badlogic.gdx.math.RandomXS128
    public void <init>(long)
    public void <init>(long,long)
    public long getState(int)
    private static final double NORM_DOUBLE
    private static final double NORM_FLOAT
com.badlogic.gdx.files.FileHandle
    public void <init>(java.lang.String)
    public void <init>(java.io.File)
    public static com.badlogic.gdx.files.FileHandle tempFile(java.lang.String)
    public static com.badlogic.gdx.files.FileHandle tempDirectory(java.lang.String)
    private static void emptyDirectory(java.io.File,boolean)
    private static boolean deleteDirectory(java.io.File)
    private static void copyFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    private static void copyDirectory(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public java.lang.String pathWithoutExtension()
    public java.io.BufferedInputStream read(int)
    public java.io.Reader reader()
    public java.io.BufferedReader reader(int)
    public java.io.BufferedReader reader(int,java.lang.String)
    public java.lang.String readString()
    public java.lang.String readString(java.lang.String)
    public int readBytes(byte[],int,int)
    public java.io.OutputStream write(boolean)
    public java.io.OutputStream write(boolean,int)
    public void write(java.io.InputStream,boolean)
    public java.io.Writer writer(boolean)
    public java.io.Writer writer(boolean,java.lang.String)
    public void writeString(java.lang.String,boolean)
    public void writeString(java.lang.String,boolean,java.lang.String)
    public void writeBytes(byte[],boolean)
    public void writeBytes(byte[],int,int,boolean)
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
    public void mkdirs()
    public boolean delete()
    public boolean deleteDirectory()
    public void emptyDirectory()
    public void emptyDirectory(boolean)
    public void copyTo(com.badlogic.gdx.files.FileHandle)
    public void moveTo(com.badlogic.gdx.files.FileHandle)
    public long lastModified()
com.badlogic.gdx.utils.BinaryHeap
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer
    public abstract void flush()
    public abstract void color(com.badlogic.gdx.graphics.Color)
    public abstract void texCoord(float,float)
    public abstract void normal(float,float,float)
com.esotericsoftware.jsonbeans.ObjectMap$Keys
com.badlogic.gdx.InputAdapter
    public boolean touchDown(int,int,int,int)
    public boolean touchUp(int,int,int,int)
    public boolean touchDragged(int,int,int)
com.badlogic.gdx.math.Bresenham2$1
com.tastygamesstudio.phone.AndroidLauncher
    public void toastMaker(java.lang.String,boolean)
com.badlogic.gdx.graphics.glutils.HdpiUtils
    public void <init>()
    public static void setMode(com.badlogic.gdx.graphics.glutils.HdpiMode)
    public static int toLogicalX(int)
    public static int toLogicalY(int)
com.badlogic.gdx.math.MathUtils
    private void <init>()
    public static float atan2(float,float)
    public static float acos(float)
    public static float asin(float)
    public static int random(int)
    public static long random(long)
    public static long random(long,long)
    public static boolean randomBoolean()
    public static boolean randomBoolean(float)
    public static float random(float,float)
    public static int randomSign()
    public static float randomTriangular()
    public static float randomTriangular(float)
    public static float randomTriangular(float,float)
    public static float randomTriangular(float,float,float)
    public static short clamp(short,short,short)
    public static long clamp(long,long,long)
    public static double clamp(double,double,double)
    public static float lerp(float,float,float)
    public static float norm(float,float,float)
    public static float map(float,float,float,float,float)
    public static float lerpAngle(float,float,float)
    public static float lerpAngleDeg(float,float,float)
    public static int floor(float)
    public static int floorPositive(float)
    public static int ceilPositive(float)
    public static int round(float)
    public static int roundPositive(float)
    public static boolean isZero(float)
    public static boolean isZero(float,float)
    public static boolean isEqual(float,float)
    public static float log(float,float)
    public static float log2(float)
    public static final float nanoToSec
    public static final float FLOAT_ROUNDING_ERROR
    public static final float PI
    public static final float PI2
    public static final float HALF_PI
    public static final float E
    private static final int SIN_BITS
    private static final int SIN_MASK
    private static final int SIN_COUNT
    private static final float radFull
    private static final float degFull
    private static final float radToIndex
    private static final float degToIndex
    public static final float radiansToDegrees
    public static final float radDeg
    public static final float degreesToRadians
    public static final float degRad
    private static final int BIG_ENOUGH_INT
    private static final double BIG_ENOUGH_FLOOR
    private static final double CEIL
    private static final double BIG_ENOUGH_CEIL
    private static final double BIG_ENOUGH_ROUND
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue
com.esotericsoftware.kryo.serializers.BlowfishSerializer
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3
com.badlogic.gdx.utils.IntSet
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntSet)
    public static varargs com.badlogic.gdx.utils.IntSet with(int[])
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public void addAll(com.badlogic.gdx.utils.IntSet)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public void clear()
    public int first()
    public void ensureCapacity(int)
    public com.badlogic.gdx.utils.IntSet$IntSetIterator iterator()
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator1
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator2
com.badlogic.gdx.graphics.g3d.environment.ShadowMap
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder
com.tastygamesstudio.phone.ClientScreen
    private void createChunk(java.lang.Object)
    public void pause()
    public void resume()
    public void dispose()
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeFloatField
com.badlogic.gdx.graphics.g2d.PolygonSprite
com.esotericsoftware.kryo.serializers.BeanSerializer
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22
com.badlogic.gdx.graphics.VertexAttribute
    public void <init>(int,int,int,boolean,java.lang.String)
    public static com.badlogic.gdx.graphics.VertexAttribute Position()
    public static com.badlogic.gdx.graphics.VertexAttribute TexCoords(int)
    public static com.badlogic.gdx.graphics.VertexAttribute Normal()
    public static com.badlogic.gdx.graphics.VertexAttribute ColorPacked()
    public static com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked()
    public static com.badlogic.gdx.graphics.VertexAttribute Tangent()
    public static com.badlogic.gdx.graphics.VertexAttribute Binormal()
    public static com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int)
    public com.badlogic.gdx.graphics.VertexAttribute copy()
com.badlogic.gdx.backends.android.AndroidInput
    public abstract void onDreamingStarted()
    public abstract void onDreamingStopped()
    public abstract void addKeyListener(android.view.View$OnKeyListener)
    public abstract void addGenericMotionListener(android.view.View$OnGenericMotionListener)
com.badlogic.gdx.utils.BufferUtils
    private void <init>()
    public static void copy(short[],int,java.nio.Buffer,int)
    public static void copy(char[],int,int,java.nio.Buffer)
    public static void copy(int[],int,int,java.nio.Buffer)
    public static void copy(long[],int,int,java.nio.Buffer)
    public static void copy(float[],int,int,java.nio.Buffer)
    public static void copy(double[],int,int,java.nio.Buffer)
    public static void copy(char[],int,java.nio.Buffer,int)
    public static void copy(int[],int,java.nio.Buffer,int)
    public static void copy(long[],int,java.nio.Buffer,int)
    public static void copy(float[],int,java.nio.Buffer,int)
    public static void copy(double[],int,java.nio.Buffer,int)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4,int)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int)
    public static long findFloats(float[],int,java.nio.Buffer,int)
    public static long findFloats(java.nio.Buffer,int,float[],int)
    public static long findFloats(float[],int,float[],int)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int,float)
    public static long findFloats(float[],int,java.nio.Buffer,int,float)
    public static long findFloats(java.nio.Buffer,int,float[],int,float)
    public static long findFloats(float[],int,float[],int,float)
    public static java.nio.DoubleBuffer newDoubleBuffer(int)
    public static java.nio.ShortBuffer newShortBuffer(int)
    public static java.nio.CharBuffer newCharBuffer(int)
    public static java.nio.LongBuffer newLongBuffer(int)
    public static long getUnsafeBufferAddress(java.nio.Buffer)
    public static java.nio.ByteBuffer newUnsafeByteBuffer(java.nio.ByteBuffer)
    public static int getAllocatedBytesUnsafe()
    private static native long getBufferAddress(java.nio.Buffer)
    public static native void clear(java.nio.ByteBuffer,int)
    private static native void copyJni(char[],int,java.nio.Buffer,int,int)
    private static native void copyJni(short[],int,java.nio.Buffer,int,int)
    private static native void copyJni(int[],int,java.nio.Buffer,int,int)
    private static native void copyJni(long[],int,java.nio.Buffer,int,int)
    private static native void copyJni(float[],int,java.nio.Buffer,int,int)
    private static native void copyJni(double[],int,java.nio.Buffer,int,int)
    private static native void transformV4M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV4M4Jni(float[],int,int,float[],int)
    private static native void transformV3M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M4Jni(float[],int,int,float[],int)
    private static native void transformV2M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M4Jni(float[],int,int,float[],int)
    private static native void transformV3M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M3Jni(float[],int,int,float[],int)
    private static native void transformV2M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M3Jni(float[],int,int,float[],int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int)
    private static native long find(float[],int,int,java.nio.Buffer,int,int)
    private static native long find(java.nio.Buffer,int,int,float[],int,int)
    private static native long find(float[],int,int,float[],int,int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int,float)
    private static native long find(float[],int,int,java.nio.Buffer,int,int,float)
    private static native long find(java.nio.Buffer,int,int,float[],int,int,float)
    private static native long find(float[],int,int,float[],int,int,float)
com.esotericsoftware.jsonbeans.JsonValue$1
com.esotericsoftware.kryo.io.ByteBufferOutput
    public void <init>(int)
    public void <init>(int,int)
    public void <init>(java.io.OutputStream)
    public void <init>(java.io.OutputStream,int)
    public void <init>(java.nio.ByteBuffer)
    public void <init>(java.nio.ByteBuffer,int)
    public void <init>(long,int)
    public void release()
    public java.nio.ByteOrder order()
    public void order(java.nio.ByteOrder)
    public java.io.OutputStream getOutputStream()
    public void setOutputStream(java.io.OutputStream)
    public java.nio.ByteBuffer getByteBuffer()
    public byte[] toBytes()
    public void setPosition(int)
    public void clear()
    public void writeAscii(java.lang.String)
    public int writeFloat(float,float,boolean)
    public int writeLongS(long,boolean)
    public int writeDouble(double,double,boolean)
    public void writeInts(int[])
    public void writeLongs(long[])
    public boolean getVarIntsEnabled()
    public void setVarIntsEnabled(boolean)
com.badlogic.gdx.utils.async.AsyncTask
com.badlogic.gdx.graphics.profiling.GLInterceptor
com.badlogic.gdx.input.GestureDetector$VelocityTracker
    private float getSum(float[],int)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer
com.badlogic.gdx.backends.android.AndroidDaydream$1
com.badlogic.gdx.math.Bezier
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20
    public void <init>(boolean,boolean,int)
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public void color(com.badlogic.gdx.graphics.Color)
    public void texCoord(float,float)
    public void normal(float,float,float)
com.tastygamesstudio.phone.R
com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer
    private static final long DEFAULT_GREGORIAN_CUTOVER
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction
com.badlogic.gdx.utils.DataBuffer
com.badlogic.gdx.assets.loaders.ParticleEffectLoader
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1
com.badlogic.gdx.backends.android.AndroidTouchHandler
    private void logAction(int,int)
com.badlogic.gdx.graphics.PixmapIO$CIM
    private void <init>()
    public static void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    private static final int BUFFER_SIZE
org.objenesis.instantiator.basic.NewInstanceInstantiator
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe
com.badlogic.gdx.graphics.g3d.decals.GroupPlug
com.badlogic.gdx.utils.Json
    public void <init>(com.badlogic.gdx.utils.JsonWriter$OutputType)
    private java.lang.Object[] getDefaultValues(java.lang.Class)
    private java.lang.String convertToString(java.lang.Object)
    public void setIgnoreUnknownFields(boolean)
    public boolean getIgnoreUnknownFields()
    public void setIgnoreDeprecated(boolean)
    public void setReadDeprecated(boolean)
    public void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public void setQuoteLongValues(boolean)
    public void setEnumNames(boolean)
    public java.lang.String getTag(java.lang.Class)
    public void setDefaultSerializer(com.badlogic.gdx.utils.Json$Serializer)
    public com.badlogic.gdx.utils.Json$Serializer getSerializer(java.lang.Class)
    public void setElementType(java.lang.Class,java.lang.String,java.lang.Class)
    public void setDeprecated(java.lang.Class,java.lang.String,boolean)
    public void setSortFields(boolean)
    public java.lang.String toJson(java.lang.Object)
    public java.lang.String toJson(java.lang.Object,java.lang.Class)
    public java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class)
    public void toJson(java.lang.Object,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer)
    public void setWriter(java.io.Writer)
    public com.badlogic.gdx.utils.JsonWriter getWriter()
    public void writeFields(java.lang.Object)
    public void writeField(java.lang.Object,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.Class)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class)
    public void writeValue(java.lang.Object)
    public void writeValue(java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.Object,java.lang.Class,java.lang.Class)
    public void writeObjectStart(java.lang.String)
    public void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class)
    public void writeObjectStart()
    public void writeObjectStart(java.lang.Class,java.lang.Class)
    public void writeObjectEnd()
    public void writeArrayStart(java.lang.String)
    public void writeArrayStart()
    public void writeArrayEnd()
    public void writeType(java.lang.Class)
    public java.lang.Object fromJson(java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public java.lang.Object fromJson(java.lang.Class,char[],int,int)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int)
    public java.lang.Object fromJson(java.lang.Class,java.lang.String)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String)
    public void readField(java.lang.Object,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,com.badlogic.gdx.utils.reflect.Field,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public java.lang.String prettyPrint(java.lang.Object)
    public java.lang.String prettyPrint(java.lang.String)
    public java.lang.String prettyPrint(java.lang.Object,int)
    public java.lang.String prettyPrint(java.lang.String,int)
    public java.lang.String prettyPrint(java.lang.Object,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public java.lang.String prettyPrint(java.lang.String,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    private com.badlogic.gdx.utils.JsonWriter writer
    private boolean quoteLongValues
    private static final boolean debug
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh
com.badlogic.gdx.graphics.g2d.PixmapPacker
    public void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean)
    public void sort(com.badlogic.gdx.utils.Array)
    public synchronized com.badlogic.gdx.graphics.g2d.PixmapPacker$Page getPage(java.lang.String)
    public synchronized int getPageIndex(java.lang.String)
    public synchronized com.badlogic.gdx.graphics.g2d.TextureAtlas generateTextureAtlas(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
    public synchronized void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
    public synchronized void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean,boolean)
    public int getPageWidth()
    public void setPageWidth(int)
    public int getPageHeight()
    public void setPageHeight(int)
    public com.badlogic.gdx.graphics.Pixmap$Format getPageFormat()
    public void setPageFormat(com.badlogic.gdx.graphics.Pixmap$Format)
    public int getPadding()
    public void setPadding(int)
    public boolean getDuplicateBorder()
    public void setDuplicateBorder(boolean)
    public boolean getPackToTexture()
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction
com.badlogic.gdx.backends.android.AndroidApplication$2
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction
com.badlogic.gdx.backends.android.DefaultAndroidInput
    private void updateOrientation()
    public float getAccelerometerX()
    public float getAccelerometerY()
    public float getAccelerometerZ()
    public float getGyroscopeX()
    public float getGyroscopeY()
    public float getGyroscopeZ()
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public int getMaxPointers()
    public int getX(int)
    public int getY(int)
    public float getPressure()
    public float getPressure(int)
    public void vibrate(int)
    public void vibrate(long[],int)
    public void cancelVibrate()
    public boolean justTouched()
    public boolean isButtonPressed(int)
    public boolean isButtonJustPressed(int)
    public void getRotationMatrix(float[])
    public float getAzimuth()
    public float getPitch()
    public float getRoll()
    public com.badlogic.gdx.InputProcessor getInputProcessor()
    public boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
    public com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public void setCursorCatched(boolean)
    public boolean isCursorCatched()
    public int getDeltaX()
    public int getDeltaX(int)
    public int getDeltaY()
    public int getDeltaY(int)
    public void setCursorPosition(int,int)
    public void addKeyListener(android.view.View$OnKeyListener)
    public void addGenericMotionListener(android.view.View$OnGenericMotionListener)
    public void onDreamingStarted()
    public void onDreamingStopped()
    public static final int NUM_TOUCHES
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine
com.badlogic.gdx.graphics.profiling.GLErrorListener$2
com.badlogic.gdx.backends.android.AndroidClipboard
    public boolean hasContents()
com.badlogic.gdx.graphics.g3d.model.data.ModelData
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void <init>(boolean,java.nio.ByteBuffer,com.badlogic.gdx.graphics.VertexAttributes)
    public int getNumMaxVertices()
    public java.nio.FloatBuffer getBuffer()
    public void updateVertices(int,float[],int,int)
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength
com.badlogic.gdx.backends.android.AndroidLiveWallpaper
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData
com.badlogic.gdx.utils.Timer
    public static com.badlogic.gdx.utils.Timer$Task post(com.badlogic.gdx.utils.Timer$Task)
    public static com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float,int)
    public com.badlogic.gdx.utils.Timer$Task postTask(com.badlogic.gdx.utils.Timer$Task)
    public void stop()
    public synchronized void clear()
    public synchronized boolean isEmpty()
com.badlogic.gdx.utils.compression.lzma.Encoder
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction
com.badlogic.gdx.math.WindowedMean
com.badlogic.gdx.utils.Base64Coder
com.badlogic.gdx.utils.PerformanceCounters
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
    public com.badlogic.gdx.utils.Array toArray()
com.esotericsoftware.kryonet.Listener$QueuedListener$4
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite
    public void setPosition(float,float)
    public void setX(float)
    public void setY(float)
    public void setOriginCenter()
    public void flip(boolean,boolean)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion getAtlasRegion()
com.esotericsoftware.kryo.util.ObjectMap$Entries
com.badlogic.gdx.assets.loaders.SkinLoader
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction
    public com.badlogic.gdx.graphics.Color getColor()
    public void setColor(com.badlogic.gdx.graphics.Color)
    public float getAlpha()
com.badlogic.gdx.graphics.Cubemap$1
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.maps.objects.EllipseMapObject
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel
com.badlogic.gdx.graphics.g2d.ParticleEmitter
    public void <init>(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    protected com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] getParticles()
    public void setSpriteMode(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode)
    public void preAllocateParticles()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode getSpriteMode()
    public java.lang.String getName()
    public void setName(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLife()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getXScale()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getYScale()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getRotation()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue getTint()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getVelocity()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getWind()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getGravity()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getAngle()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getEmission()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getTransparency()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDuration()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDelay()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLifeOffset()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getXOffsetValue()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getYOffsetValue()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnWidth()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnHeight()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue getSpawnShape()
    public boolean isAttached()
    public void setAttached(boolean)
    public boolean isContinuous()
    public void setContinuous(boolean)
    public boolean isAligned()
    public void setAligned(boolean)
    public boolean isAdditive()
    public void setAdditive(boolean)
    public boolean cleansUpBlendFunction()
    public void setCleansUpBlendFunction(boolean)
    public boolean isBehind()
    public void setBehind(boolean)
    public boolean isPremultipliedAlpha()
    public void setPremultipliedAlpha(boolean)
    public int getMinParticleCount()
    public int getMaxParticleCount()
    public float getPercentComplete()
    public float getX()
    public float getY()
    public int getActiveCount()
    public void setFlip(boolean,boolean)
    public void flipY()
    public com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
    public void scaleSize(float)
    public void matchSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchXSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchYSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchMotion(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void save(java.io.Writer)
    private com.badlogic.gdx.math.collision.BoundingBox bounds
    private static final int UPDATE_SCALE
    private static final int UPDATE_ANGLE
    private static final int UPDATE_ROTATION
    private static final int UPDATE_VELOCITY
    private static final int UPDATE_WIND
    private static final int UPDATE_GRAVITY
    private static final int UPDATE_TINT
    private static final int UPDATE_SPRITE
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell
com.badlogic.gdx.backends.android.AndroidPreferences
    public com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean)
    public com.badlogic.gdx.Preferences putInteger(java.lang.String,int)
    public com.badlogic.gdx.Preferences putLong(java.lang.String,long)
    public com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
    public com.badlogic.gdx.Preferences put(java.util.Map)
    public boolean getBoolean(java.lang.String)
    public int getInteger(java.lang.String)
    public long getLong(java.lang.String)
    public float getFloat(java.lang.String)
    public java.lang.String getString(java.lang.String)
    public boolean getBoolean(java.lang.String,boolean)
    public int getInteger(java.lang.String,int)
    public long getLong(java.lang.String,long)
    public float getFloat(java.lang.String,float)
    public java.util.Map get()
    public boolean contains(java.lang.String)
    public void clear()
    public void remove(java.lang.String)
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder
com.esotericsoftware.kryonet.Listener$LagListener
com.badlogic.gdx.maps.objects.PolylineMapObject
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config
com.esotericsoftware.kryo.serializers.ExternalizableSerializer
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4
com.badlogic.gdx.utils.async.AsyncResult
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader
org.objenesis.instantiator.basic.ConstructorInstantiator
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder
com.tastygamesstudio.phone.ServerScreen
    public void pause()
    public void resume()
    public void dispose()
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
    public com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels
com.badlogic.gdx.utils.ObjectLongMap$Entries
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1
com.badlogic.gdx.assets.loaders.SoundLoader
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethodResult
com.badlogic.gdx.graphics.g2d.PixmapPackerIO
com.badlogic.gdx.Application
    public abstract com.badlogic.gdx.Audio getAudio()
    public abstract com.badlogic.gdx.Input getInput()
    public abstract com.badlogic.gdx.Files getFiles()
    public abstract com.badlogic.gdx.Net getNet()
    public abstract void error(java.lang.String,java.lang.String,java.lang.Throwable)
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public abstract void setLogLevel(int)
    public abstract int getLogLevel()
    public abstract void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
    public abstract com.badlogic.gdx.ApplicationLogger getApplicationLogger()
    public abstract int getVersion()
    public abstract long getJavaHeap()
    public abstract long getNativeHeap()
    public abstract void exit()
    public static final int LOG_NONE
    public static final int LOG_DEBUG
    public static final int LOG_INFO
    public static final int LOG_ERROR
com.esotericsoftware.kryo.util.IdentityMap$Entry
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2$1
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters
com.badlogic.gdx.scenes.scene2d.utils.UIUtils
    private void <init>()
    public static boolean left()
    public static boolean left(int)
    public static boolean right()
    public static boolean right(int)
    public static boolean middle()
    public static boolean middle(int)
    public static boolean shift(int)
    public static boolean ctrl(int)
    public static boolean alt()
    public static boolean alt(int)
com.esotericsoftware.jsonbeans.ObjectMap$MapIterator
com.badlogic.gdx.utils.LongArray
com.badlogic.gdx.Graphics
    public abstract com.badlogic.gdx.graphics.GL20 getGL20()
    public abstract com.badlogic.gdx.graphics.GL30 getGL30()
    public abstract void setGL20(com.badlogic.gdx.graphics.GL20)
    public abstract void setGL30(com.badlogic.gdx.graphics.GL30)
    public abstract float getBackBufferScale()
    public abstract int getSafeInsetLeft()
    public abstract int getSafeInsetTop()
    public abstract int getSafeInsetBottom()
    public abstract int getSafeInsetRight()
    public abstract long getFrameId()
    public abstract float getRawDeltaTime()
    public abstract int getFramesPerSecond()
    public abstract com.badlogic.gdx.Graphics$GraphicsType getType()
    public abstract com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public abstract float getPpiX()
    public abstract float getPpiY()
    public abstract float getPpcX()
    public abstract float getPpcY()
    public abstract float getDensity()
    public abstract boolean supportsDisplayModeChange()
    public abstract com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public abstract com.badlogic.gdx.Graphics$Monitor getMonitor()
    public abstract com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public abstract com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public abstract boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public abstract boolean setWindowedMode(int,int)
    public abstract void setTitle(java.lang.String)
    public abstract void setUndecorated(boolean)
    public abstract void setResizable(boolean)
    public abstract void setVSync(boolean)
    public abstract void setForegroundFPS(int)
    public abstract com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public abstract void setContinuousRendering(boolean)
    public abstract boolean isContinuousRendering()
    public abstract boolean isFullscreen()
    public abstract com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
    public abstract void setCursor(com.badlogic.gdx.graphics.Cursor)
    public abstract void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder
com.esotericsoftware.kryonet.rmi.ObjectSpace$InvokeMethod
com.esotericsoftware.kryo.util.IntMap$Entry
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer
com.badlogic.gdx.utils.Array$ArrayIterator
    public void <init>(com.badlogic.gdx.utils.Array)
    public void reset()
com.badlogic.gdx.graphics.Texture
    public void <init>(com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
    public void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
    public static int getNumManagedTextures()
    public int getDepth()
com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener
com.badlogic.gdx.input.RemoteInput$TouchEvent
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader
com.badlogic.gdx.graphics.g3d.utils.AnimationController
com.badlogic.gdx.graphics.PixmapIO$PNG
com.badlogic.gdx.utils.LongMap$Values
    public com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.utils.Pools
    public static void set(java.lang.Class,com.badlogic.gdx.utils.Pool)
    public static void freeAll(com.badlogic.gdx.utils.Array)
    private void <init>()
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction
com.badlogic.gdx.maps.tiled.TiledMapTile
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue
com.badlogic.gdx.utils.PooledLinkedList$1
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode
com.badlogic.gdx.utils.TimeUtils
    public void <init>()
    public static long nanosToMillis(long)
    public static long millisToNanos(long)
    public static long timeSinceNanos(long)
    public static long timeSinceMillis(long)
    private static final long nanosPerMilli
com.badlogic.gdx.utils.SortedIntList$Node
com.badlogic.gdx.graphics.g2d.SpriteCache
com.tastygamesstudio.phone.screens.MenuScreen
    public void pause()
    public void resume()
    public void dispose()
com.badlogic.gdx.graphics.g2d.Animation
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator
    public static void setMaxTextureSize(int)
    public static int getMaxTextureSize()
    public int scaleForPixelHeight(int)
    public int scaleForPixelWidth(int,int)
    public int scaleToFitSquare(int,int,int)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap generateGlyphAndBitmap(int,int,boolean)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(int)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
    public static final java.lang.String DEFAULT_CHARS
    public static final int NO_MAXIMUM
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap
com.badlogic.gdx.maps.MapObjects
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer
com.badlogic.gdx.utils.XmlReader$Element
com.badlogic.gdx.graphics.g3d.particles.ResourceData
com.badlogic.gdx.backends.android.AndroidMouseHandler
    private void logAction(int)
com.badlogic.gdx.utils.IntFloatMap
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1
com.badlogic.gdx.utils.Sort
    public void sort(com.badlogic.gdx.utils.Array)
    public void sort(java.lang.Object[])
    public void sort(com.badlogic.gdx.utils.Array,java.util.Comparator)
    public void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.graphics.g2d.ParticleEffect
    public void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffect)
    public void reset()
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public void setDuration(int)
    public void setFlip(boolean,boolean)
    public void flipY()
    public com.badlogic.gdx.utils.Array getEmitters()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter findEmitter(java.lang.String)
    public void preAllocateParticles()
    public void save(java.io.Writer)
    public void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas)
    protected com.badlogic.gdx.graphics.g2d.ParticleEmitter newEmitter(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
    public void scaleEffect(float)
    public void scaleEffect(float,float)
    public void setEmittersCleanUpBlendFunction(boolean)
    private com.badlogic.gdx.math.collision.BoundingBox bounds
com.badlogic.gdx.math.BSpline
com.badlogic.gdx.backends.android.AndroidApplicationLogger
    public void error(java.lang.String,java.lang.String,java.lang.Throwable)
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.esotericsoftware.kryo.io.FastInput
com.badlogic.gdx.utils.PooledLinkedList
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config
com.badlogic.gdx.files.FileHandleStream
com.esotericsoftware.kryonet.Server
    public void <init>()
    public void setDiscoveryHandler(com.esotericsoftware.kryonet.ServerDiscoveryHandler)
    public com.esotericsoftware.kryonet.Serialization getSerialization()
    public void bind(int)
    public void stop()
    public void sendToAllTCP(java.lang.Object)
    public void sendToAllExceptTCP(int,java.lang.Object)
    public void sendToAllUDP(java.lang.Object)
    public void sendToAllExceptUDP(int,java.lang.Object)
    public void sendToUDP(int,java.lang.Object)
    public void removeListener(com.esotericsoftware.kryonet.Listener)
    public void dispose()
    public java.lang.Thread getUpdateThread()
    public com.esotericsoftware.kryonet.Connection[] getConnections()
com.badlogic.gdx.graphics.glutils.ShapeRenderer
    public void setColor(float,float,float,float)
    public com.badlogic.gdx.graphics.Color getColor()
    public void updateMatrices()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public void identity()
    public void translate(float,float,float)
    public void rotate(float,float,float,float)
    public void scale(float,float,float)
    public void point(float,float,float)
    public final void line(float,float,float,float,float,float)
    public final void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public final void line(float,float,float,float)
    public final void line(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public final void line(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void curve(float,float,float,float,float,float,float,float,int)
    public void triangle(float,float,float,float,float,float)
    public void triangle(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rect(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(float,float,float,float,float)
    public void rectLine(float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
    public void box(float,float,float,float,float,float)
    public void x(float,float,float)
    public void x(com.badlogic.gdx.math.Vector2,float)
    public void arc(float,float,float,float,float)
    public void arc(float,float,float,float,float,int)
    public void circle(float,float,float)
    public void circle(float,float,float,int)
    public void ellipse(float,float,float,float)
    public void ellipse(float,float,float,float,int)
    public void ellipse(float,float,float,float,float)
    public void ellipse(float,float,float,float,float,int)
    public void cone(float,float,float,float,float)
    public void cone(float,float,float,float,float,int)
    public void polygon(float[],int,int)
    public void polygon(float[])
    public void polyline(float[],int,int)
    public void polyline(float[])
    public com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType getCurrentType()
    public com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer getRenderer()
com.esotericsoftware.kryonet.rmi.ObjectSpace$4
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2
com.esotericsoftware.kryo.util.IntMap$Keys
com.badlogic.gdx.utils.BinaryHeap$Node
com.esotericsoftware.kryo.io.KryoDataInput
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeLongField
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration
com.tastygamesstudio.phone.FontGeneratorPool
com.badlogic.gdx.ScreenAdapter
com.badlogic.gdx.utils.IntFloatMap$MapIterator
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader
com.badlogic.gdx.graphics.g3d.utils.TextureProvider
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec
    public void <init>(int)
com.tastygamesstudio.phone.R$string
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer
com.esotericsoftware.reflectasm.AccessClassLoader
    public static void remove(java.lang.ClassLoader)
    public static int activeAccessClassLoaders()
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener
com.badlogic.gdx.graphics.g3d.environment.SpotLight
com.badlogic.gdx.Input$Buttons
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder
    public void <init>(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
    public abstract com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.graphics.glutils.IndexArray
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.esotericsoftware.kryonet.util.ObjectIntMap
com.esotericsoftware.kryo.io.OutputChunked
com.badlogic.gdx.graphics.glutils.MipMapGenerator
    private void <init>()
    public static void setUseHardwareMipMap(boolean)
    public static void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int)
com.tastygamesstudio.phone.Config
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter
org.objenesis.instantiator.gcj.GCJInstantiator
com.badlogic.gdx.input.RemoteInput$EventTrigger
org.objenesis.instantiator.android.AndroidSerializationInstantiator
com.badlogic.gdx.math.Intersector$SplitTriangle
com.badlogic.gdx.Version
com.badlogic.gdx.input.RemoteInput
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28
com.badlogic.gdx.backends.android.AsynchronousSound$5
com.badlogic.gdx.math.Polyline
com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent
    static final int KEY_DOWN
    static final int KEY_UP
    static final int KEY_TYPED
com.esotericsoftware.kryo.serializers.DefaultArraySerializers
com.badlogic.gdx.utils.reflect.Field
    public boolean isDefaultAccess()
    public boolean isFinal()
    public boolean isPrivate()
    public boolean isProtected()
    public boolean isPublic()
    public boolean isVolatile()
    public com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
    public com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
com.esotericsoftware.kryo.io.ByteBufferInputStream
com.esotericsoftware.jsonbeans.JsonException
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue
com.badlogic.gdx.Net$HttpResponse
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters
com.badlogic.gdx.utils.ObjectLongMap$Entry
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService
com.esotericsoftware.kryo.util.DefaultClassResolver
    public static final byte NAME
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration
com.esotericsoftware.kryo.util.IdentityObjectIntMap
    public void <init>(int)
    private int getAndIncrementStash(java.lang.Object,int,int)
    private boolean containsKeyStash(java.lang.Object)
    public int getAndIncrement(java.lang.Object,int,int)
    public int remove(java.lang.Object,int)
    int removeStash(java.lang.Object,int)
    void removeStashIndex(int)
    public void shrink(int)
    public void clear(int)
    public boolean containsValue(int)
    public boolean containsKey(java.lang.Object)
    public java.lang.Object findKey(int)
    public void ensureCapacity(int)
    private static final int PRIME1
    private static final int PRIME2
    private static final int PRIME3
com.badlogic.gdx.Input$Peripheral
com.badlogic.gdx.utils.ObjectLongMap$Keys
com.badlogic.gdx.utils.ComparableTimSort
    private void <init>(java.lang.Object[])
    static void sort(java.lang.Object[])
    static void sort(java.lang.Object[],int,int)
    private static final int MIN_MERGE
    private static final int MIN_GALLOP
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final boolean DEBUG
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config
com.badlogic.gdx.maps.tiled.TideMapLoader
com.esotericsoftware.jsonbeans.OutputType
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool
com.badlogic.gdx.math.Matrix3
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated
com.badlogic.gdx.math.GridPoint2
com.esotericsoftware.kryo.util.ObjectMap
    public void <init>(int)
    public void <init>(com.esotericsoftware.kryo.util.ObjectMap)
    private java.lang.Object getStash(java.lang.Object,java.lang.Object)
    public void putAll(com.esotericsoftware.kryo.util.ObjectMap)
    public java.lang.Object get(java.lang.Object,java.lang.Object)
    public java.lang.Object remove(java.lang.Object)
    java.lang.Object removeStash(java.lang.Object)
    void removeStashIndex(int)
    public void shrink(int)
    public void clear(int)
    public boolean containsValue(java.lang.Object,boolean)
    public java.lang.Object findKey(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public com.esotericsoftware.kryo.util.ObjectMap$Entries entries()
    public com.esotericsoftware.kryo.util.ObjectMap$Values values()
    public com.esotericsoftware.kryo.util.ObjectMap$Keys keys()
    private static final int PRIME1
    private static final int PRIME2
    private static final int PRIME3
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
com.badlogic.gdx.graphics.glutils.InstanceData
    public abstract int getNumMaxInstances()
    public abstract com.badlogic.gdx.graphics.VertexAttributes getAttributes()
    public abstract void setInstanceData(float[],int,int)
    public abstract void updateInstanceData(int,float[],int,int)
    public abstract void setInstanceData(java.nio.FloatBuffer,int)
    public abstract void updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void invalidate()
com.badlogic.gdx.math.Circle
    public void <init>(com.badlogic.gdx.math.Vector2,float)
    public void <init>(com.badlogic.gdx.math.Circle)
    public void <init>(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public void set(com.badlogic.gdx.math.Vector2,float)
    public void set(com.badlogic.gdx.math.Circle)
    public void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public void setPosition(com.badlogic.gdx.math.Vector2)
    public void setPosition(float,float)
    public void setX(float)
    public void setY(float)
    public void setRadius(float)
    public boolean contains(com.badlogic.gdx.math.Vector2)
    public boolean contains(com.badlogic.gdx.math.Circle)
    public boolean overlaps(com.badlogic.gdx.math.Circle)
    public float circumference()
    public float area()
org.objenesis.instantiator.gcj.GCJInstantiatorBase$DummyStream
com.badlogic.gdx.utils.SharedLibraryLoader
    static java.lang.String randomUUID()
    public void <init>(java.lang.String)
    private java.io.File getExtractedFile(java.lang.String,java.lang.String)
    private boolean canWrite(java.io.File)
    private boolean canExecute(java.io.File)
    public java.io.File extractFile(java.lang.String,java.lang.String)
    public void extractFileTo(java.lang.String,java.io.File)
com.badlogic.gdx.utils.IntFloatMap$Values
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters
com.badlogic.gdx.utils.PropertiesUtils
com.esotericsoftware.kryonet.rmi.ObjectSpace$CachedMethod
com.badlogic.gdx.utils.Bits
com.badlogic.gdx.utils.NumberUtils
    public void <init>()
    public static float intBitsToFloat(int)
    public static long doubleToLongBits(double)
    public static double longBitsToDouble(long)
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer
com.badlogic.gdx.net.NetJavaImpl$2
com.badlogic.gdx.scenes.scene2d.actions.ColorAction
com.badlogic.gdx.maps.MapProperties
com.badlogic.gdx.graphics.g3d.model.Animation
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue
    public boolean isIndependent()
    public void setIndependent(boolean)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
com.badlogic.gdx.utils.ObjectLongMap$MapIterator
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy
    public void setFallbackInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
    public org.objenesis.strategy.InstantiatorStrategy getFallbackInstantiatorStrategy()
com.badlogic.gdx.graphics.profiling.GL20Interceptor
com.badlogic.gdx.Files
    public abstract com.badlogic.gdx.files.FileHandle external(java.lang.String)
    public abstract com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
    public abstract com.badlogic.gdx.files.FileHandle local(java.lang.String)
    public abstract boolean isExternalStorageAvailable()
    public abstract boolean isLocalStorageAvailable()
com.esotericsoftware.jsonbeans.ReadOnlySerializer
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23
com.badlogic.gdx.utils.UBJsonReader
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute
com.badlogic.gdx.math.CumulativeDistribution
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper
com.badlogic.gdx.utils.IntIntMap$Values
com.esotericsoftware.kryonet.Listener$LagListener$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy
    public abstract void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute
com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer
    public void <init>(java.lang.Class)
com.badlogic.gdx.graphics.g3d.RenderableProvider
com.badlogic.gdx.graphics.g3d.decals.DecalBatch
com.badlogic.gdx.backends.android.AsynchronousSound$1
com.esotericsoftware.kryonet.KryoNetException
    public void <init>()
    public void <init>(java.lang.Throwable)
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData
com.badlogic.gdx.graphics.glutils.FileTextureData
    public com.badlogic.gdx.files.FileHandle getFileHandle()
com.badlogic.gdx.graphics.GL20
    public abstract void glActiveTexture(int)
    public abstract void glBlendFunc(int,int)
    public abstract void glClearDepthf(float)
    public abstract void glClearStencil(int)
    public abstract void glColorMask(boolean,boolean,boolean,boolean)
    public abstract void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCullFace(int)
    public abstract void glDeleteTextures(int,java.nio.IntBuffer)
    public abstract void glDepthFunc(int)
    public abstract void glDepthRangef(float,float)
    public abstract void glFinish()
    public abstract void glFlush()
    public abstract void glFrontFace(int)
    public abstract void glGenTextures(int,java.nio.IntBuffer)
    public abstract int glGetError()
    public abstract void glHint(int,int)
    public abstract void glLineWidth(float)
    public abstract void glPolygonOffset(float,float)
    public abstract void glStencilFunc(int,int,int)
    public abstract void glStencilMask(int)
    public abstract void glStencilOp(int,int,int)
    public abstract void glBindAttribLocation(int,int,java.lang.String)
    public abstract void glBlendColor(float,float,float,float)
    public abstract void glBlendEquation(int)
    public abstract void glBlendEquationSeparate(int,int)
    public abstract void glDeleteBuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glDetachShader(int,int)
    public abstract void glGenBuffers(int,java.nio.IntBuffer)
    public abstract void glGenFramebuffers(int,java.nio.IntBuffer)
    public abstract void glGenRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public abstract void glGetBooleanv(int,java.nio.Buffer)
    public abstract void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public abstract void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetUniformiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public abstract boolean glIsBuffer(int)
    public abstract boolean glIsEnabled(int)
    public abstract boolean glIsFramebuffer(int)
    public abstract boolean glIsProgram(int)
    public abstract boolean glIsRenderbuffer(int)
    public abstract boolean glIsShader(int)
    public abstract boolean glIsTexture(int)
    public abstract void glReleaseShaderCompiler()
    public abstract void glSampleCoverage(float,boolean)
    public abstract void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public abstract void glStencilFuncSeparate(int,int,int,int)
    public abstract void glStencilMaskSeparate(int,int)
    public abstract void glStencilOpSeparate(int,int,int,int)
    public abstract void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glUniform1f(int,float)
    public abstract void glUniform1fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform1fv(int,int,float[],int)
    public abstract void glUniform1iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform1iv(int,int,int[],int)
    public abstract void glUniform2f(int,float,float)
    public abstract void glUniform2fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform2fv(int,int,float[],int)
    public abstract void glUniform2i(int,int,int)
    public abstract void glUniform2iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform2iv(int,int,int[],int)
    public abstract void glUniform3f(int,float,float,float)
    public abstract void glUniform3fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform3fv(int,int,float[],int)
    public abstract void glUniform3i(int,int,int,int)
    public abstract void glUniform3iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3iv(int,int,int[],int)
    public abstract void glUniform4f(int,float,float,float,float)
    public abstract void glUniform4fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform4fv(int,int,float[],int)
    public abstract void glUniform4i(int,int,int,int,int)
    public abstract void glUniform4iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4iv(int,int,int[],int)
    public abstract void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glValidateProgram(int)
    public abstract void glVertexAttrib1f(int,float)
    public abstract void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib2f(int,float,float)
    public abstract void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib3f(int,float,float,float)
    public abstract void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib4f(int,float,float,float,float)
    public abstract void glVertexAttrib4fv(int,java.nio.FloatBuffer)
    public static final int GL_ES_VERSION_2_0
    public static final int GL_DEPTH_BUFFER_BIT
    public static final int GL_STENCIL_BUFFER_BIT
    public static final int GL_COLOR_BUFFER_BIT
    public static final int GL_FALSE
    public static final int GL_TRUE
    public static final int GL_POINTS
    public static final int GL_LINES
    public static final int GL_LINE_LOOP
    public static final int GL_LINE_STRIP
    public static final int GL_TRIANGLES
    public static final int GL_TRIANGLE_STRIP
    public static final int GL_TRIANGLE_FAN
    public static final int GL_ZERO
    public static final int GL_ONE
    public static final int GL_SRC_COLOR
    public static final int GL_ONE_MINUS_SRC_COLOR
    public static final int GL_SRC_ALPHA
    public static final int GL_ONE_MINUS_SRC_ALPHA
    public static final int GL_DST_ALPHA
    public static final int GL_ONE_MINUS_DST_ALPHA
    public static final int GL_DST_COLOR
    public static final int GL_ONE_MINUS_DST_COLOR
    public static final int GL_SRC_ALPHA_SATURATE
    public static final int GL_FUNC_ADD
    public static final int GL_BLEND_EQUATION
    public static final int GL_BLEND_EQUATION_RGB
    public static final int GL_BLEND_EQUATION_ALPHA
    public static final int GL_FUNC_SUBTRACT
    public static final int GL_FUNC_REVERSE_SUBTRACT
    public static final int GL_BLEND_DST_RGB
    public static final int GL_BLEND_SRC_RGB
    public static final int GL_BLEND_DST_ALPHA
    public static final int GL_BLEND_SRC_ALPHA
    public static final int GL_CONSTANT_COLOR
    public static final int GL_ONE_MINUS_CONSTANT_COLOR
    public static final int GL_CONSTANT_ALPHA
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA
    public static final int GL_BLEND_COLOR
    public static final int GL_ARRAY_BUFFER
    public static final int GL_ELEMENT_ARRAY_BUFFER
    public static final int GL_ARRAY_BUFFER_BINDING
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING
    public static final int GL_STREAM_DRAW
    public static final int GL_STATIC_DRAW
    public static final int GL_DYNAMIC_DRAW
    public static final int GL_BUFFER_SIZE
    public static final int GL_BUFFER_USAGE
    public static final int GL_CURRENT_VERTEX_ATTRIB
    public static final int GL_FRONT
    public static final int GL_BACK
    public static final int GL_FRONT_AND_BACK
    public static final int GL_TEXTURE_2D
    public static final int GL_CULL_FACE
    public static final int GL_BLEND
    public static final int GL_DITHER
    public static final int GL_STENCIL_TEST
    public static final int GL_DEPTH_TEST
    public static final int GL_SCISSOR_TEST
    public static final int GL_POLYGON_OFFSET_FILL
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE
    public static final int GL_SAMPLE_COVERAGE
    public static final int GL_NO_ERROR
    public static final int GL_INVALID_ENUM
    public static final int GL_INVALID_VALUE
    public static final int GL_INVALID_OPERATION
    public static final int GL_OUT_OF_MEMORY
    public static final int GL_CW
    public static final int GL_CCW
    public static final int GL_LINE_WIDTH
    public static final int GL_ALIASED_POINT_SIZE_RANGE
    public static final int GL_ALIASED_LINE_WIDTH_RANGE
    public static final int GL_CULL_FACE_MODE
    public static final int GL_FRONT_FACE
    public static final int GL_DEPTH_RANGE
    public static final int GL_DEPTH_WRITEMASK
    public static final int GL_DEPTH_CLEAR_VALUE
    public static final int GL_DEPTH_FUNC
    public static final int GL_STENCIL_CLEAR_VALUE
    public static final int GL_STENCIL_FUNC
    public static final int GL_STENCIL_FAIL
    public static final int GL_STENCIL_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_PASS_DEPTH_PASS
    public static final int GL_STENCIL_REF
    public static final int GL_STENCIL_VALUE_MASK
    public static final int GL_STENCIL_WRITEMASK
    public static final int GL_STENCIL_BACK_FUNC
    public static final int GL_STENCIL_BACK_FAIL
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS
    public static final int GL_STENCIL_BACK_REF
    public static final int GL_STENCIL_BACK_VALUE_MASK
    public static final int GL_STENCIL_BACK_WRITEMASK
    public static final int GL_VIEWPORT
    public static final int GL_SCISSOR_BOX
    public static final int GL_COLOR_CLEAR_VALUE
    public static final int GL_COLOR_WRITEMASK
    public static final int GL_UNPACK_ALIGNMENT
    public static final int GL_PACK_ALIGNMENT
    public static final int GL_MAX_TEXTURE_SIZE
    public static final int GL_MAX_TEXTURE_UNITS
    public static final int GL_MAX_VIEWPORT_DIMS
    public static final int GL_SUBPIXEL_BITS
    public static final int GL_RED_BITS
    public static final int GL_GREEN_BITS
    public static final int GL_BLUE_BITS
    public static final int GL_ALPHA_BITS
    public static final int GL_DEPTH_BITS
    public static final int GL_STENCIL_BITS
    public static final int GL_POLYGON_OFFSET_UNITS
    public static final int GL_POLYGON_OFFSET_FACTOR
    public static final int GL_TEXTURE_BINDING_2D
    public static final int GL_SAMPLE_BUFFERS
    public static final int GL_SAMPLES
    public static final int GL_SAMPLE_COVERAGE_VALUE
    public static final int GL_SAMPLE_COVERAGE_INVERT
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_DONT_CARE
    public static final int GL_FASTEST
    public static final int GL_NICEST
    public static final int GL_GENERATE_MIPMAP
    public static final int GL_GENERATE_MIPMAP_HINT
    public static final int GL_BYTE
    public static final int GL_UNSIGNED_BYTE
    public static final int GL_SHORT
    public static final int GL_UNSIGNED_SHORT
    public static final int GL_INT
    public static final int GL_UNSIGNED_INT
    public static final int GL_FLOAT
    public static final int GL_FIXED
    public static final int GL_DEPTH_COMPONENT
    public static final int GL_ALPHA
    public static final int GL_RGB
    public static final int GL_RGBA
    public static final int GL_LUMINANCE
    public static final int GL_LUMINANCE_ALPHA
    public static final int GL_UNSIGNED_SHORT_4_4_4_4
    public static final int GL_UNSIGNED_SHORT_5_5_5_1
    public static final int GL_UNSIGNED_SHORT_5_6_5
    public static final int GL_FRAGMENT_SHADER
    public static final int GL_VERTEX_SHADER
    public static final int GL_MAX_VERTEX_ATTRIBS
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS
    public static final int GL_MAX_VARYING_VECTORS
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS
    public static final int GL_SHADER_TYPE
    public static final int GL_DELETE_STATUS
    public static final int GL_LINK_STATUS
    public static final int GL_VALIDATE_STATUS
    public static final int GL_ATTACHED_SHADERS
    public static final int GL_ACTIVE_UNIFORMS
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH
    public static final int GL_ACTIVE_ATTRIBUTES
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    public static final int GL_SHADING_LANGUAGE_VERSION
    public static final int GL_CURRENT_PROGRAM
    public static final int GL_NEVER
    public static final int GL_LESS
    public static final int GL_EQUAL
    public static final int GL_LEQUAL
    public static final int GL_GREATER
    public static final int GL_NOTEQUAL
    public static final int GL_GEQUAL
    public static final int GL_ALWAYS
    public static final int GL_KEEP
    public static final int GL_REPLACE
    public static final int GL_INCR
    public static final int GL_DECR
    public static final int GL_INVERT
    public static final int GL_INCR_WRAP
    public static final int GL_DECR_WRAP
    public static final int GL_VENDOR
    public static final int GL_RENDERER
    public static final int GL_VERSION
    public static final int GL_EXTENSIONS
    public static final int GL_NEAREST
    public static final int GL_LINEAR
    public static final int GL_NEAREST_MIPMAP_NEAREST
    public static final int GL_LINEAR_MIPMAP_NEAREST
    public static final int GL_NEAREST_MIPMAP_LINEAR
    public static final int GL_LINEAR_MIPMAP_LINEAR
    public static final int GL_TEXTURE_MAG_FILTER
    public static final int GL_TEXTURE_MIN_FILTER
    public static final int GL_TEXTURE_WRAP_S
    public static final int GL_TEXTURE_WRAP_T
    public static final int GL_TEXTURE
    public static final int GL_TEXTURE_CUBE_MAP
    public static final int GL_TEXTURE_BINDING_CUBE_MAP
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE
    public static final int GL_TEXTURE0
    public static final int GL_TEXTURE1
    public static final int GL_TEXTURE2
    public static final int GL_TEXTURE3
    public static final int GL_TEXTURE4
    public static final int GL_TEXTURE5
    public static final int GL_TEXTURE6
    public static final int GL_TEXTURE7
    public static final int GL_TEXTURE8
    public static final int GL_TEXTURE9
    public static final int GL_TEXTURE10
    public static final int GL_TEXTURE11
    public static final int GL_TEXTURE12
    public static final int GL_TEXTURE13
    public static final int GL_TEXTURE14
    public static final int GL_TEXTURE15
    public static final int GL_TEXTURE16
    public static final int GL_TEXTURE17
    public static final int GL_TEXTURE18
    public static final int GL_TEXTURE19
    public static final int GL_TEXTURE20
    public static final int GL_TEXTURE21
    public static final int GL_TEXTURE22
    public static final int GL_TEXTURE23
    public static final int GL_TEXTURE24
    public static final int GL_TEXTURE25
    public static final int GL_TEXTURE26
    public static final int GL_TEXTURE27
    public static final int GL_TEXTURE28
    public static final int GL_TEXTURE29
    public static final int GL_TEXTURE30
    public static final int GL_TEXTURE31
    public static final int GL_ACTIVE_TEXTURE
    public static final int GL_REPEAT
    public static final int GL_CLAMP_TO_EDGE
    public static final int GL_MIRRORED_REPEAT
    public static final int GL_FLOAT_VEC2
    public static final int GL_FLOAT_VEC3
    public static final int GL_FLOAT_VEC4
    public static final int GL_INT_VEC2
    public static final int GL_INT_VEC3
    public static final int GL_INT_VEC4
    public static final int GL_BOOL
    public static final int GL_BOOL_VEC2
    public static final int GL_BOOL_VEC3
    public static final int GL_BOOL_VEC4
    public static final int GL_FLOAT_MAT2
    public static final int GL_FLOAT_MAT3
    public static final int GL_FLOAT_MAT4
    public static final int GL_SAMPLER_2D
    public static final int GL_SAMPLER_CUBE
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT
    public static final int GL_COMPILE_STATUS
    public static final int GL_INFO_LOG_LENGTH
    public static final int GL_SHADER_SOURCE_LENGTH
    public static final int GL_SHADER_COMPILER
    public static final int GL_SHADER_BINARY_FORMATS
    public static final int GL_NUM_SHADER_BINARY_FORMATS
    public static final int GL_LOW_FLOAT
    public static final int GL_MEDIUM_FLOAT
    public static final int GL_HIGH_FLOAT
    public static final int GL_LOW_INT
    public static final int GL_MEDIUM_INT
    public static final int GL_HIGH_INT
    public static final int GL_FRAMEBUFFER
    public static final int GL_RENDERBUFFER
    public static final int GL_RGBA4
    public static final int GL_RGB5_A1
    public static final int GL_RGB565
    public static final int GL_DEPTH_COMPONENT16
    public static final int GL_STENCIL_INDEX
    public static final int GL_STENCIL_INDEX8
    public static final int GL_RENDERBUFFER_WIDTH
    public static final int GL_RENDERBUFFER_HEIGHT
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT
    public static final int GL_RENDERBUFFER_RED_SIZE
    public static final int GL_RENDERBUFFER_GREEN_SIZE
    public static final int GL_RENDERBUFFER_BLUE_SIZE
    public static final int GL_RENDERBUFFER_ALPHA_SIZE
    public static final int GL_RENDERBUFFER_DEPTH_SIZE
    public static final int GL_RENDERBUFFER_STENCIL_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    public static final int GL_COLOR_ATTACHMENT0
    public static final int GL_DEPTH_ATTACHMENT
    public static final int GL_STENCIL_ATTACHMENT
    public static final int GL_NONE
    public static final int GL_FRAMEBUFFER_COMPLETE
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    public static final int GL_FRAMEBUFFER_UNSUPPORTED
    public static final int GL_FRAMEBUFFER_BINDING
    public static final int GL_RENDERBUFFER_BINDING
    public static final int GL_MAX_RENDERBUFFER_SIZE
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE
    public static final int GL_COVERAGE_BUFFER_BIT_NV
    public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT
    public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
com.badlogic.gdx.net.HttpRequestBuilder
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration
com.badlogic.gdx.graphics.g2d.Animation$1
com.esotericsoftware.kryo.util.UnsafeUtil
com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer
    public void <init>(com.esotericsoftware.kryo.Kryo,java.lang.Class)
    public void setElementsCanBeNull(boolean)
    public void setElementsAreSameType(boolean)
    private final java.lang.Class type
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent
com.badlogic.gdx.input.GestureDetector$GestureAdapter
    public boolean tap(float,float,int,int)
    public boolean longPress(float,float)
    public boolean fling(float,float,int)
    public boolean pan(float,float,float,float)
    public boolean panStop(float,float,int,int)
    public boolean zoom(float,float)
    public boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot
    private static native int getLinearHoriAdvance(long)
    private static native int getLinearVertAdvance(long)
    private static native int getAdvanceX(long)
    private static native int getAdvanceY(long)
    private static native long getBitmap(long)
    private static native int getBitmapLeft(long)
    private static native int getBitmapTop(long)
    private static native boolean renderGlyph(long,int)
    public int getLinearHoriAdvance()
    public int getLinearVertAdvance()
    public int getAdvanceX()
    public int getAdvanceY()
    public com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap getBitmap()
    public int getBitmapLeft()
    public int getBitmapTop()
    public boolean renderGlyph(int)
com.badlogic.gdx.net.HttpStatus
com.badlogic.gdx.utils.DataInput
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue
org.objenesis.instantiator.basic.NullInstantiator
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver
com.badlogic.gdx.utils.viewport.StretchViewport
    public void <init>(float,float,com.badlogic.gdx.graphics.Camera)
com.badlogic.gdx.utils.JsonWriter
com.esotericsoftware.kryo.util.IntMap$Entries
com.esotericsoftware.kryo.Generics
    public void <init>(com.esotericsoftware.kryo.Generics)
com.esotericsoftware.kryo.io.FastOutput
com.esotericsoftware.kryo.util.DefaultStreamFactory
    public com.esotericsoftware.kryo.io.Input getInput()
    public com.esotericsoftware.kryo.io.Input getInput(int)
    public com.esotericsoftware.kryo.io.Input getInput(byte[])
    public com.esotericsoftware.kryo.io.Input getInput(byte[],int,int)
    public com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream)
    public com.esotericsoftware.kryo.io.Input getInput(java.io.InputStream,int)
    public com.esotericsoftware.kryo.io.Output getOutput()
    public com.esotericsoftware.kryo.io.Output getOutput(int)
    public com.esotericsoftware.kryo.io.Output getOutput(int,int)
    public com.esotericsoftware.kryo.io.Output getOutput(byte[])
    public com.esotericsoftware.kryo.io.Output getOutput(byte[],int)
    public com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream)
    public com.esotericsoftware.kryo.io.Output getOutput(java.io.OutputStream,int)
com.badlogic.gdx.utils.viewport.ScreenViewport
com.badlogic.gdx.audio.AudioRecorder
com.badlogic.gdx.graphics.g2d.ParticleEffectPool
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library
    public com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace(byte[],int,int)
com.badlogic.gdx.utils.ReflectionPool
    public void <init>(java.lang.Class)
    public void <init>(java.lang.Class,int)
com.badlogic.gdx.utils.ObjectMap
    public void <init>(com.badlogic.gdx.utils.ObjectMap)
    public void putAll(com.badlogic.gdx.utils.ObjectMap)
    public boolean notEmpty()
    public boolean isEmpty()
    public void shrink(int)
    public void clear(int)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.viewport.Viewport
    public void apply()
    public final void update(int,int)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
    public com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
    public void setWorldWidth(float)
    public void setWorldHeight(float)
    public void setScreenX(int)
    public void setScreenY(int)
    public void setScreenWidth(int)
    public void setScreenHeight(int)
    public void setScreenPosition(int,int)
    public void setScreenSize(int,int)
    public int getLeftGutterWidth()
    public int getRightGutterX()
    public int getRightGutterWidth()
    public int getBottomGutterHeight()
    public int getTopGutterY()
    public int getTopGutterHeight()
com.badlogic.gdx.graphics.Cubemap$CubemapSide
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool
com.badlogic.gdx.backends.android.AndroidFiles
    public abstract boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.AndroidMusic
    void <init>(com.badlogic.gdx.backends.android.AndroidAudio,android.media.MediaPlayer)
    public boolean isLooping()
    public void setLooping(boolean)
    public void setVolume(float)
    public float getVolume()
    public void setPan(float,float)
    public void stop()
    public void setPosition(float)
    public float getPosition()
    public float getDuration()
    public void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
    private float volume
com.esotericsoftware.kryo.util.UnsafeUtil$1
com.badlogic.gdx.maps.tiled.TmxMapLoader
com.esotericsoftware.jsonbeans.JsonValue$ValueType
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack
    public void <init>()
    public static com.badlogic.gdx.math.Rectangle peekScissors()
    public static void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
    public static com.badlogic.gdx.math.Rectangle getViewport()
com.badlogic.gdx.net.HttpResponseHeader
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction
    public void <init>(float)
    public void <init>(float,com.badlogic.gdx.math.Interpolation)
    public void finish()
    public float getTime()
    public void setTime(float)
    public float getDuration()
    public com.badlogic.gdx.math.Interpolation getInterpolation()
    public boolean isReverse()
    public void setReverse(boolean)
    public boolean isComplete()
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction
    public void setScale(float)
    public float getX()
    public void setX(float)
    public float getY()
    public void setY(float)
org.objenesis.ObjenesisStd
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder
com.esotericsoftware.kryo.util.IntMap$MapIterator
com.badlogic.gdx.scenes.scene2d.actions.IntAction
com.esotericsoftware.jsonbeans.JsonValue
com.badlogic.gdx.scenes.scene2d.Stage
    public void <init>()
    public void removeTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int)
    public void addAction(com.badlogic.gdx.scenes.scene2d.Action)
    public com.badlogic.gdx.graphics.g2d.Batch getBatch()
    public com.badlogic.gdx.utils.viewport.Viewport getViewport()
    public void setViewport(com.badlogic.gdx.utils.viewport.Viewport)
    public void setRoot(com.badlogic.gdx.scenes.scene2d.Group)
    public com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
    public void setActionsRequestRendering(boolean)
    public void setDebugInvisible(boolean)
    public void setDebugAll(boolean)
    public boolean isDebugAll()
    public void setDebugUnderMouse(boolean)
    public void setDebugParentUnderMouse(boolean)
    public void setDebugTableUnderMouse(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)
    public void setDebugTableUnderMouse(boolean)
    private boolean debugInvisible
com.badlogic.gdx.scenes.scene2d.actions.AddAction
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder
com.esotericsoftware.jsonbeans.JsonSerializer
com.badlogic.gdx.Gdx
    public void <init>()
com.badlogic.gdx.utils.Null
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer
com.badlogic.gdx.utils.ArrayMap$Values
com.badlogic.gdx.graphics.TextureArray
    public varargs void <init>(java.lang.String[])
    public varargs void <init>(com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(boolean,com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.files.FileHandle[])
    public void <init>(com.badlogic.gdx.graphics.TextureArrayData)
    private static varargs com.badlogic.gdx.files.FileHandle[] getInternalHandles(java.lang.String[])
    private static void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.TextureArray)
    public static java.lang.String getManagedStatus()
    public static int getNumManagedTextureArrays()
    public int getWidth()
    public int getHeight()
    public int getDepth()
com.badlogic.gdx.backends.android.DefaultAndroidFiles
    public com.badlogic.gdx.files.FileHandle external(java.lang.String)
    public com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
    public com.badlogic.gdx.files.FileHandle local(java.lang.String)
    public boolean isExternalStorageAvailable()
    public boolean isLocalStorageAvailable()
    public boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.AndroidDaydream$2
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction
com.badlogic.gdx.graphics.Camera
    public abstract void update(boolean)
    public void lookAt(float,float,float)
    public void lookAt(com.badlogic.gdx.math.Vector3)
    public void normalizeUp()
    public void rotate(float,float,float,float)
    public void rotate(com.badlogic.gdx.math.Vector3,float)
    public void rotate(com.badlogic.gdx.math.Matrix4)
    public void rotate(com.badlogic.gdx.math.Quaternion)
    public void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float)
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void translate(float,float,float)
    public void translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float,float,float,float,float)
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
com.badlogic.gdx.math.Affine2
    public void <init>(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 idt()
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Affine2 setToTranslation(float,float)
    public com.badlogic.gdx.math.Affine2 setToTranslation(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToScaling(float,float)
    public com.badlogic.gdx.math.Affine2 setToScaling(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToRotation(float)
    public com.badlogic.gdx.math.Affine2 setToRotationRad(float)
    public com.badlogic.gdx.math.Affine2 setToRotation(float,float)
    public com.badlogic.gdx.math.Affine2 setToShearing(float,float)
    public com.badlogic.gdx.math.Affine2 setToShearing(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(float,float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToProduct(com.badlogic.gdx.math.Affine2,com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 inv()
    public com.badlogic.gdx.math.Affine2 mul(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 translate(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preTranslate(float,float)
    public com.badlogic.gdx.math.Affine2 preTranslate(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 scale(float,float)
    public com.badlogic.gdx.math.Affine2 scale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preScale(float,float)
    public com.badlogic.gdx.math.Affine2 preScale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 rotate(float)
    public com.badlogic.gdx.math.Affine2 rotateRad(float)
    public com.badlogic.gdx.math.Affine2 preRotate(float)
    public com.badlogic.gdx.math.Affine2 preRotateRad(float)
    public com.badlogic.gdx.math.Affine2 shear(float,float)
    public com.badlogic.gdx.math.Affine2 shear(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preShear(float,float)
    public com.badlogic.gdx.math.Affine2 preShear(com.badlogic.gdx.math.Vector2)
    public float det()
    public com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2)
    public boolean isTranslation()
    public boolean isIdt()
    public void applyTo(com.badlogic.gdx.math.Vector2)
    private static final long serialVersionUID
com.badlogic.gdx.scenes.scene2d.actions.Actions
    public void <init>()
    public static com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color)
    public static com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float,com.badlogic.gdx.math.Interpolation)
    public static com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float)
    public static com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float)
    public static com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float)
    public static com.badlogic.gdx.scenes.scene2d.actions.VisibleAction show()
    public static com.badlogic.gdx.scenes.scene2d.actions.VisibleAction hide()
    public static com.badlogic.gdx.scenes.scene2d.actions.VisibleAction visible(boolean)
    public static com.badlogic.gdx.scenes.scene2d.actions.TouchableAction touchable(com.badlogic.gdx.scenes.scene2d.Touchable)
    public static com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float)
    public static com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction timeScale(float,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public static varargs com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action[])
    public static com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence()
    public static com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action)
    public static varargs com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action[])
    public static com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel()
    public static com.badlogic.gdx.scenes.scene2d.actions.RepeatAction repeat(int,com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.RunnableAction run(java.lang.Runnable)
    public static com.badlogic.gdx.scenes.scene2d.actions.LayoutAction layout(boolean)
    public static com.badlogic.gdx.scenes.scene2d.actions.AfterAction after(com.badlogic.gdx.scenes.scene2d.Action)
    public static com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean)
    public static com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.Action targeting(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Action)
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable
    public com.badlogic.gdx.graphics.g2d.Sprite getSprite()
com.esotericsoftware.kryo.io.ByteBufferOutputStream
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics
    private static native int getWidth(long)
    private static native int getHoriBearingX(long)
    private static native int getHoriBearingY(long)
    private static native int getVertBearingX(long)
    private static native int getVertBearingY(long)
    private static native int getVertAdvance(long)
    public int getWidth()
    public int getHoriBearingX()
    public int getHoriBearingY()
    public int getVertBearingX()
    public int getVertBearingY()
    public int getVertAdvance()
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer
com.badlogic.gdx.utils.SortedIntList$Iterator
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction
com.badlogic.gdx.assets.AssetManager$RefCountedContainer
com.badlogic.gdx.utils.SnapshotArray
    public void <init>()
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(boolean,int)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Object[])
    public static varargs com.badlogic.gdx.utils.SnapshotArray with(java.lang.Object[])
    public void insertRange(int,int)
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public void shuffle()
    public java.lang.Object[] setSize(int)
com.badlogic.gdx.graphics.Texture$1
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy
com.esotericsoftware.kryo.util.IdentityMap$MapIterator
com.esotericsoftware.kryo.io.UnsafeInput
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData
    public void <init>()
    public com.badlogic.gdx.utils.Array getPages()
    public com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.utils.viewport.ScalingViewport
    public com.badlogic.gdx.utils.Scaling getScaling()
    public void setScaling(com.badlogic.gdx.utils.Scaling)
com.badlogic.gdx.math.Interpolation$BounceOut
    public void <init>(float[],float[])
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter
com.badlogic.gdx.backends.android.APKExpansionSupport
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader
org.objenesis.strategy.BaseInstantiatorStrategy
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight
com.badlogic.gdx.input.RemoteInput$KeyEvent
com.badlogic.gdx.graphics.profiling.GLErrorListener$1
com.badlogic.gdx.maps.tiled.TiledMapRenderer
com.badlogic.gdx.utils.TextFormatter
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
    public com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback
    public abstract void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue
com.badlogic.gdx.assets.loaders.AssetLoader
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region
    public int[] findValue(java.lang.String)
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc
com.esotericsoftware.jsonbeans.ObjectMap$Entry
com.badlogic.gdx.utils.BooleanArray
com.esotericsoftware.kryonet.Listener$QueuedListener$1
com.esotericsoftware.kryonet.rmi.TimeoutException
com.esotericsoftware.kryonet.rmi.ObjectSpace
com.badlogic.gdx.utils.IdentityMap
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor
com.badlogic.gdx.utils.BaseJsonReader
    public abstract com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
    public abstract com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle)
com.esotericsoftware.kryo.io.KryoDataOutput
com.badlogic.gdx.math.Intersector$MinimumTranslationVector
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1
com.badlogic.gdx.graphics.g3d.utils.ShapeCache
com.badlogic.gdx.audio.Music
    public abstract void play()
    public abstract void pause()
    public abstract void stop()
    public abstract boolean isPlaying()
    public abstract void setLooping(boolean)
    public abstract boolean isLooping()
    public abstract void setVolume(float)
    public abstract float getVolume()
    public abstract void setPan(float,float)
    public abstract void setPosition(float)
    public abstract float getPosition()
    public abstract void dispose()
    public abstract void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
com.badlogic.gdx.graphics.g2d.freetype.FreeType
    public void <init>()
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute
com.badlogic.gdx.utils.reflect.ReflectionException
    public void <init>()
    public void <init>(java.lang.String)
    public void <init>(java.lang.Throwable)
com.badlogic.gdx.utils.compression.lz.OutWindow
com.badlogic.gdx.scenes.scene2d.actions.FloatAction
com.esotericsoftware.kryo.util.IntMap
    public void <init>(int)
    public void <init>(com.esotericsoftware.kryo.util.IntMap)
    private boolean containsKeyStash(int)
    public void putAll(com.esotericsoftware.kryo.util.IntMap)
    public java.lang.Object get(int,java.lang.Object)
    public void shrink(int)
    public void clear(int)
    public boolean containsValue(java.lang.Object,boolean)
    public boolean containsKey(int)
    public int findKey(java.lang.Object,boolean,int)
    public void ensureCapacity(int)
    public com.esotericsoftware.kryo.util.IntMap$Entries entries()
    public com.esotericsoftware.kryo.util.IntMap$Values values()
    public com.esotericsoftware.kryo.util.IntMap$Keys keys()
    private static final int PRIME1
    private static final int PRIME2
    private static final int PRIME3
    private static final int EMPTY
com.badlogic.gdx.utils.QuadTreeFloat$1
com.esotericsoftware.kryo.util.ObjectMap$Values
com.badlogic.gdx.utils.ShortArray
com.badlogic.gdx.graphics.g2d.PolygonBatch
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver
com.esotericsoftware.kryonet.ClientDiscoveryHandler$1
    public java.net.DatagramPacket onRequestNewDatagramPacket()
    public void onDiscoveredHost(java.net.DatagramPacket,com.esotericsoftware.kryo.Kryo)
    public void onFinally()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver
com.badlogic.gdx.utils.Array
    public static com.badlogic.gdx.utils.Array of(java.lang.Class)
    public static com.badlogic.gdx.utils.Array of(boolean,int,java.lang.Class)
    public void add(java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
    public void insertRange(int,int)
    public boolean containsAll(com.badlogic.gdx.utils.Array,boolean)
    public boolean containsAny(com.badlogic.gdx.utils.Array,boolean)
    public int lastIndexOf(java.lang.Object,boolean)
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public boolean notEmpty()
    public java.lang.Object[] shrink()
    public java.lang.Object[] setSize(int)
    public java.lang.Object selectRanked(java.util.Comparator,int)
    public int selectRankedIndex(java.util.Comparator,int)
    public void shuffle()
    public java.lang.Iterable select(com.badlogic.gdx.utils.Predicate)
    public java.lang.Object[] toArray()
    public boolean equalsIdentity(java.lang.Object)
    private com.badlogic.gdx.utils.Predicate$PredicateIterable predicateIterable
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder
com.badlogic.gdx.graphics.Colors
    public static com.badlogic.gdx.utils.ObjectMap getColors()
    public static com.badlogic.gdx.graphics.Color put(java.lang.String,com.badlogic.gdx.graphics.Color)
    private void <init>()
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart
com.badlogic.gdx.utils.ObjectIntMap$Values
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2
org.objenesis.instantiator.sun.UnsafeFactoryInstantiator
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation
com.badlogic.gdx.backends.android.DefaultAndroidAudio
    public com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
    public com.badlogic.gdx.audio.Music newMusic(java.io.FileDescriptor)
    public com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
    public com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
com.badlogic.gdx.math.Interpolation$BounceIn
    public void <init>(float[],float[])
com.badlogic.gdx.maps.objects.TextureMapObject
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2
com.badlogic.gdx.input.RemoteInput$RemoteInputListener
com.badlogic.gdx.graphics.g2d.TextureAtlas
    public void <init>()
    public void <init>(java.lang.String)
    public void <init>(com.badlogic.gdx.files.FileHandle,boolean)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.g2d.TextureRegion)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String,int)
    public com.badlogic.gdx.utils.Array findRegions(java.lang.String)
    public com.badlogic.gdx.utils.Array createSprites()
    public com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String,int)
    public com.badlogic.gdx.utils.Array createSprites(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.NinePatch createPatch(java.lang.String)
    public com.badlogic.gdx.utils.ObjectSet getTextures()
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader
com.badlogic.gdx.graphics.g2d.DistanceFieldFont
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy
com.badlogic.gdx.utils.ObjectLongMap$Values
com.esotericsoftware.kryonet.rmi.ObjectSpace$3
com.badlogic.gdx.backends.android.AsynchronousSound
com.badlogic.gdx.maps.tiled.TiledMapTileLayer
org.objenesis.instantiator.basic.FailingInstantiator
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCharField
com.badlogic.gdx.graphics.CubemapData
    public abstract int getWidth()
    public abstract int getHeight()
com.badlogic.gdx.graphics.g3d.Attributes
com.badlogic.gdx.utils.ObjectFloatMap$Keys
com.esotericsoftware.kryonet.JsonSerialization
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1
com.tastygamesstudio.phone.R$style
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder
com.badlogic.gdx.graphics.g3d.Renderable
com.badlogic.gdx.math.MathUtils$Sin
    private void <init>()
com.badlogic.gdx.backends.android.AndroidZipFileHandle
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.utils.IntIntMap$Keys
com.esotericsoftware.kryo.util.IdentityMap$Values
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3
com.badlogic.gdx.utils.JsonValue
    public void <init>(double)
    public void <init>(long)
    private void json(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,com.badlogic.gdx.utils.JsonWriter$OutputType)
    private void prettyPrint(com.badlogic.gdx.utils.JsonValue,java.io.Writer,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    private static void indent(int,java.io.Writer)
    public com.badlogic.gdx.utils.JsonValue get(int)
    public com.badlogic.gdx.utils.JsonValue require(int)
    public com.badlogic.gdx.utils.JsonValue require(java.lang.String)
    public com.badlogic.gdx.utils.JsonValue remove(int)
    public com.badlogic.gdx.utils.JsonValue remove(java.lang.String)
    public void remove()
    public boolean notEmpty()
    public boolean isEmpty()
    public int size()
    public char asChar()
    public java.lang.String[] asStringArray()
    public float[] asFloatArray()
    public double[] asDoubleArray()
    public long[] asLongArray()
    public int[] asIntArray()
    public boolean[] asBooleanArray()
    public byte[] asByteArray()
    public short[] asShortArray()
    public char[] asCharArray()
    public boolean hasChild(java.lang.String)
    public float getFloat(java.lang.String,float)
    public double getDouble(java.lang.String,double)
    public long getLong(java.lang.String,long)
    public int getInt(java.lang.String,int)
    public boolean getBoolean(java.lang.String,boolean)
    public byte getByte(java.lang.String,byte)
    public short getShort(java.lang.String,short)
    public char getChar(java.lang.String,char)
    public java.lang.String getString(java.lang.String)
    public float getFloat(java.lang.String)
    public double getDouble(java.lang.String)
    public long getLong(java.lang.String)
    public int getInt(java.lang.String)
    public boolean getBoolean(java.lang.String)
    public byte getByte(java.lang.String)
    public short getShort(java.lang.String)
    public char getChar(java.lang.String)
    public java.lang.String getString(int)
    public float getFloat(int)
    public double getDouble(int)
    public long getLong(int)
    public int getInt(int)
    public boolean getBoolean(int)
    public byte getByte(int)
    public short getShort(int)
    public char getChar(int)
    public com.badlogic.gdx.utils.JsonValue$ValueType type()
    public void setType(com.badlogic.gdx.utils.JsonValue$ValueType)
    public com.badlogic.gdx.utils.JsonValue parent()
    public com.badlogic.gdx.utils.JsonValue child()
    public void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void addChild(com.badlogic.gdx.utils.JsonValue)
    public com.badlogic.gdx.utils.JsonValue next()
    public void setNext(com.badlogic.gdx.utils.JsonValue)
    public com.badlogic.gdx.utils.JsonValue prev()
    public void setPrev(com.badlogic.gdx.utils.JsonValue)
    public java.lang.String toJson(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public void prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,java.io.Writer)
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16
com.esotericsoftware.kryonet.ClientDiscoveryHandler
    public abstract java.net.DatagramPacket onRequestNewDatagramPacket()
    public abstract void onDiscoveredHost(java.net.DatagramPacket,com.esotericsoftware.kryo.Kryo)
    public abstract void onFinally()
com.badlogic.gdx.graphics.g3d.particles.ParticleController
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random
com.badlogic.gdx.utils.reflect.ClassReflection
    public void <init>()
    public static boolean isArray(java.lang.Class)
    public static boolean isPrimitive(java.lang.Class)
    public static boolean isEnum(java.lang.Class)
    public static boolean isAnnotation(java.lang.Class)
    public static boolean isInterface(java.lang.Class)
    public static boolean isAbstract(java.lang.Class)
    public static java.lang.Class getComponentType(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Constructor[] getConstructors(java.lang.Class)
    public static java.lang.Object[] getEnumConstants(java.lang.Class)
    public static varargs com.badlogic.gdx.utils.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static com.badlogic.gdx.utils.reflect.Method[] getDeclaredMethods(java.lang.Class)
    public static varargs com.badlogic.gdx.utils.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static com.badlogic.gdx.utils.reflect.Field[] getFields(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Field getField(java.lang.Class,java.lang.String)
    public static com.badlogic.gdx.utils.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)
    public static boolean isAnnotationPresent(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getAnnotations(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation getAnnotation(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class,java.lang.Class)
    public static java.lang.Class[] getInterfaces(java.lang.Class)
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter
com.tastygamesstudio.phone.BitmapFontDeserializer
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe
com.badlogic.gdx.utils.StreamUtils
    public void <init>()
    public static void copyStream(java.io.InputStream,java.io.OutputStream,int)
    public static void copyStream(java.io.InputStream,java.nio.ByteBuffer,int)
    public static byte[] copyStreamToByteArray(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream,int)
    public static java.lang.String copyStreamToString(java.io.InputStream,int,java.lang.String)
    public static final int DEFAULT_BUFFER_SIZE
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page
    public com.badlogic.gdx.graphics.Pixmap getPixmap()
    public com.badlogic.gdx.utils.OrderedMap getRects()
    public com.badlogic.gdx.graphics.Texture getTexture()
com.esotericsoftware.kryo.util.ObjectMap$Keys
com.esotericsoftware.kryo.io.KryoObjectOutput
org.objenesis.instantiator.basic.AccessibleInstantiator
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec
    public void <init>(int,int,int)
    int internalFormat
    int format
    int type
    boolean isGpuOnly
com.badlogic.gdx.scenes.scene2d.utils.Disableable
    public abstract void setDisabled(boolean)
    public abstract boolean isDisabled()
com.badlogic.gdx.graphics.g2d.TextureRegion
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
    public static com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int)
    public void setRegion(com.badlogic.gdx.graphics.Texture)
    public void setTexture(com.badlogic.gdx.graphics.Texture)
    public void setU(float)
    public void setV(float)
    public void setU2(float)
    public void setV2(float)
    public void setRegionX(int)
    public void setRegionY(int)
    public void setRegionWidth(int)
    public void setRegionHeight(int)
    public boolean isFlipX()
    public boolean isFlipY()
    public void scroll(float,float)
    public com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int)
com.badlogic.gdx.maps.tiled.TiledMapTileSet
com.badlogic.gdx.utils.LongMap$MapIterator
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.graphics.glutils.FacedCubemapData
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance
com.badlogic.gdx.backends.android.AsynchronousSound$6
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue
    public void setLow(float)
    public void setLow(float,float)
    public float getLowMin()
    public void setLowMin(float)
    public float getLowMax()
    public void setLowMax(float)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform
com.badlogic.gdx.backends.android.AsynchronousAndroidAudio
org.objenesis.instantiator.SerializationInstantiatorHelper
com.badlogic.gdx.utils.Queue$QueueIterator
    public void <init>(com.badlogic.gdx.utils.Queue)
    public void reset()
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool
com.badlogic.gdx.math.Interpolation$Bounce
    public void <init>(float[],float[])
org.objenesis.instantiator.android.Android10Instantiator
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeByteField
com.badlogic.gdx.utils.Predicate$PredicateIterable
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue
com.badlogic.gdx.math.GeometryUtils
com.badlogic.gdx.utils.StringBuilder
    public void <init>(java.lang.CharSequence)
    public void <init>(com.badlogic.gdx.utils.StringBuilder)
    final char[] getValue()
    public int capacity()
    final void delete0(int,int)
    final void deleteCharAt0(int)
    public void ensureCapacity(int)
    public void getChars(int,int,char[],int)
    final void insert0(int,char[])
    final void insert0(int,char[],int,int)
    final void insert0(int,char)
    final void insert0(int,java.lang.CharSequence,int,int)
    final void reverse0()
    public void setCharAt(int,char)
    public java.lang.String substring(int)
    public int indexOfIgnoreCase(java.lang.String,int)
    public boolean contains(java.lang.String)
    public boolean containsIgnoreCase(java.lang.String)
    public int lastIndexOf(java.lang.String)
    public int lastIndexOf(java.lang.String,int)
    public void trimToSize()
    public int codePointAt(int)
    public int codePointBefore(int)
    public int codePointCount(int,int)
    public int offsetByCodePoints(int,int)
    public com.badlogic.gdx.utils.StringBuilder appendLine(java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder append(char[],int,int)
    public com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder,int,int)
    public com.badlogic.gdx.utils.StringBuilder appendCodePoint(int)
    public com.badlogic.gdx.utils.StringBuilder delete(int,int)
    public com.badlogic.gdx.utils.StringBuilder deleteCharAt(int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,boolean)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char)
    public com.badlogic.gdx.utils.StringBuilder insert(int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,long)
    public com.badlogic.gdx.utils.StringBuilder insert(int,float)
    public com.badlogic.gdx.utils.StringBuilder insert(int,double)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.Object)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[])
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[],int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence,int,int)
    public com.badlogic.gdx.utils.StringBuilder replace(int,int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder replace(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder reverse()
    public boolean isEmpty()
    public boolean notEmpty()
    public boolean equalsIgnoreCase(com.badlogic.gdx.utils.StringBuilder)
    public boolean equalsIgnoreCase(java.lang.String)
    static final int INITIAL_CAPACITY
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters
com.badlogic.gdx.utils.async.AsyncExecutor$1
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener
org.objenesis.instantiator.android.Android17Instantiator
com.badlogic.gdx.maps.tiled.TiledMap
com.badlogic.gdx.graphics.g2d.Animation$PlayMode
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter
com.badlogic.gdx.graphics.GLTexture
    public void <init>(int)
    public abstract int getWidth()
    public abstract int getHeight()
    public abstract int getDepth()
    public abstract boolean isManaged()
    protected abstract void reload()
    public void bind(int)
    public void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
    public void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
    public float unsafeSetAnisotropicFilter(float)
    public float setAnisotropicFilter(float)
    public float getAnisotropicFilter()
com.esotericsoftware.kryonet.rmi.ObjectSpace$RemoteObjectSerializer
com.badlogic.gdx.maps.MapGroupLayer
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool
org.objenesis.instantiator.perc.PercSerializationInstantiator
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs
com.badlogic.gdx.math.Plane
    public void <init>()
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void set(float,float,float,float)
    public float distance(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(float,float,float)
    public boolean isFrontFacing(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 getNormal()
    public float getD()
    public void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void set(float,float,float,float,float,float)
    public void set(com.badlogic.gdx.math.Plane)
    private static final long serialVersionUID
com.badlogic.gdx.utils.Collections
    public void <init>()
com.badlogic.gdx.backends.android.AndroidSound
com.esotericsoftware.kryo.util.ObjectMap$Entry
org.objenesis.instantiator.sun.SunReflectionFactorySerializationInstantiator
com.badlogic.gdx.Screen
    public abstract void pause()
    public abstract void resume()
    public abstract void dispose()
com.badlogic.gdx.scenes.scene2d.utils.Layout
    public abstract void layout()
    public abstract void invalidate()
    public abstract void setFillParent(boolean)
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder
com.badlogic.gdx.utils.IntIntMap$Entry
com.badlogic.gdx.graphics.g3d.decals.Decal
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch
com.esotericsoftware.kryo.io.InputChunked
com.badlogic.gdx.utils.Logger
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer
com.esotericsoftware.kryonet.Listener$ThreadedListener
com.badlogic.gdx.utils.LittleEndianInputStream
com.badlogic.gdx.maps.objects.CircleMapObject
com.badlogic.gdx.graphics.g2d.GlyphLayout
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence)
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String)
    private static final float epsilon
com.badlogic.gdx.graphics.g3d.model.data.ModelNode
com.badlogic.gdx.maps.MapLayer
com.badlogic.gdx.backends.android.AndroidAudioRecorder
com.badlogic.gdx.utils.compression.lzma.Base
com.badlogic.gdx.backends.android.AsynchronousSound$2
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue
    public void setHigh(float)
    public void setHigh(float,float)
    public float getHighMin()
    public void setHighMin(float)
    public float getHighMax()
    public void setHighMax(float)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
    public float[] getScaling()
    public void setScaling(float[])
    public float[] getTimeline()
    public void setTimeline(float[])
    public void setRelative(boolean)
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter
org.objenesis.instantiator.gcj.GCJInstantiatorBase
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11
com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCachedField
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1
com.badlogic.gdx.assets.loaders.FileHandleResolver
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue
com.tastygamesstudio.phone.AndroidLauncher$Send
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData
com.badlogic.gdx.graphics.g3d.model.Node
com.badlogic.gdx.utils.PauseableThread
com.esotericsoftware.kryo.util.IdentityMap$Keys
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24
com.badlogic.gdx.graphics.glutils.FrameBuffer
    void <init>()
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean)
    public static void unbind()
    protected com.badlogic.gdx.graphics.Texture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
    protected void disposeColorTexture(com.badlogic.gdx.graphics.Texture)
    protected void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.Texture)
    protected synthetic bridge void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected synthetic bridge void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected synthetic bridge com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute
com.badlogic.gdx.maps.MapLayers
com.tastygamesstudio.phone.Register
    public void <init>()
    public static final int BUFFER_SIZE
    public static final float TIME_DELTA
    public static final int TIMEOUT
    public static final int TCP_PORT
    public static final int UDP_PORT
com.badlogic.gdx.graphics.profiling.GL30Interceptor
com.badlogic.gdx.utils.reflect.Constructor
    public java.lang.Class[] getParameterTypes()
    public boolean isAccessible()
com.badlogic.gdx.backends.android.AndroidGL20
    public void glActiveTexture(int)
    public void glBindAttribLocation(int,int,java.lang.String)
    public void glBlendColor(float,float,float,float)
    public void glBlendEquation(int)
    public void glBlendEquationSeparate(int,int)
    public void glBlendFunc(int,int)
    public void glClearDepthf(float)
    public void glClearStencil(int)
    public void glColorMask(boolean,boolean,boolean,boolean)
    public void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public void glCullFace(int)
    public void glDeleteBuffers(int,java.nio.IntBuffer)
    public void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public void glDeleteTextures(int,java.nio.IntBuffer)
    public void glDepthFunc(int)
    public void glDepthRangef(float,float)
    public void glDetachShader(int,int)
    public void glFinish()
    public void glFlush()
    public void glFrontFace(int)
    public void glGenBuffers(int,java.nio.IntBuffer)
    public void glGenFramebuffers(int,java.nio.IntBuffer)
    public void glGenRenderbuffers(int,java.nio.IntBuffer)
    public void glGenTextures(int,java.nio.IntBuffer)
    public void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public void glGetBooleanv(int,java.nio.Buffer)
    public void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public int glGetError()
    public void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public void glGetUniformiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public void glHint(int,int)
    public boolean glIsBuffer(int)
    public boolean glIsEnabled(int)
    public boolean glIsFramebuffer(int)
    public boolean glIsProgram(int)
    public boolean glIsRenderbuffer(int)
    public boolean glIsShader(int)
    public boolean glIsTexture(int)
    public void glLineWidth(float)
    public void glPolygonOffset(float,float)
    public void glReleaseShaderCompiler()
    public void glSampleCoverage(float,boolean)
    public void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public void glStencilFunc(int,int,int)
    public void glStencilFuncSeparate(int,int,int,int)
    public void glStencilMask(int)
    public void glStencilMaskSeparate(int,int)
    public void glStencilOp(int,int,int)
    public void glStencilOpSeparate(int,int,int,int)
    public void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glTexParameteriv(int,int,java.nio.IntBuffer)
    public void glUniform1f(int,float)
    public void glUniform1fv(int,int,java.nio.FloatBuffer)
    public void glUniform1fv(int,int,float[],int)
    public void glUniform1iv(int,int,java.nio.IntBuffer)
    public void glUniform1iv(int,int,int[],int)
    public void glUniform2f(int,float,float)
    public void glUniform2fv(int,int,java.nio.FloatBuffer)
    public void glUniform2fv(int,int,float[],int)
    public void glUniform2i(int,int,int)
    public void glUniform2iv(int,int,java.nio.IntBuffer)
    public void glUniform2iv(int,int,int[],int)
    public void glUniform3f(int,float,float,float)
    public void glUniform3fv(int,int,java.nio.FloatBuffer)
    public void glUniform3fv(int,int,float[],int)
    public void glUniform3i(int,int,int,int)
    public void glUniform3iv(int,int,java.nio.IntBuffer)
    public void glUniform3iv(int,int,int[],int)
    public void glUniform4f(int,float,float,float,float)
    public void glUniform4fv(int,int,java.nio.FloatBuffer)
    public void glUniform4fv(int,int,float[],int)
    public void glUniform4i(int,int,int,int,int)
    public void glUniform4iv(int,int,java.nio.IntBuffer)
    public void glUniform4iv(int,int,int[],int)
    public void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2fv(int,int,boolean,float[],int)
    public void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3fv(int,int,boolean,float[],int)
    public void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glValidateProgram(int)
    public void glVertexAttrib1f(int,float)
    public void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib2f(int,float,float)
    public void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib3f(int,float,float,float)
    public void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib4f(int,float,float,float,float)
    public void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat
com.badlogic.gdx.Game
    public void dispose()
    public void pause()
    public void resume()
    public void resize(int,int)
    public com.badlogic.gdx.Screen getScreen()
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue
com.badlogic.gdx.net.ServerSocketHints
com.badlogic.gdx.net.Socket
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction
com.badlogic.gdx.Input$Keys
com.badlogic.gdx.utils.TimSort
    private void <init>(java.lang.Object[],java.util.Comparator)
    static void sort(java.lang.Object[],java.util.Comparator)
    static void sort(java.lang.Object[],int,int,java.util.Comparator)
    private static final int MIN_MERGE
    private static final int MIN_GALLOP
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final boolean DEBUG
com.esotericsoftware.jsonbeans.OutputType$1
com.badlogic.gdx.utils.ObjectLongMap
com.badlogic.gdx.utils.XmlWriter
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random
com.badlogic.gdx.graphics.g3d.ModelCache$1
com.badlogic.gdx.utils.IntFloatMap$Entries
com.esotericsoftware.jsonbeans.JsonSerializable
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1
com.badlogic.gdx.graphics.Cursor
com.badlogic.gdx.assets.AssetErrorListener
com.badlogic.gdx.utils.async.ThreadUtils
com.badlogic.gdx.math.Shape2D
    public abstract boolean contains(com.badlogic.gdx.math.Vector2)
    public abstract boolean contains(float,float)
com.badlogic.gdx.utils.FloatArray
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.FloatArray)
    public void <init>(float[])
    public void <init>(boolean,float[],int,int)
    public static varargs com.badlogic.gdx.utils.FloatArray with(float[])
    public void add(float,float)
    public void add(float,float,float)
    public void add(float,float,float,float)
    public varargs void addAll(float[])
    public void set(int,float)
    public void incr(int,float)
    public void incr(float)
    public void mul(int,float)
    public void mul(float)
    public void insert(int,float)
    public void insertRange(int,int)
    public void swap(int,int)
    public boolean contains(float)
    public int indexOf(float)
    public int lastIndexOf(float)
    public boolean removeValue(float)
    public float removeIndex(int)
    public boolean removeAll(com.badlogic.gdx.utils.FloatArray)
    public float pop()
    public float peek()
    public boolean notEmpty()
    public boolean isEmpty()
    public float[] shrink()
    public float[] setSize(int)
    public void sort()
    public void reverse()
    public void shuffle()
    public float random()
    public float[] toArray()
    public boolean equals(java.lang.Object,float)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D
com.badlogic.gdx.graphics.glutils.ETC1
    public void <init>()
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImage(com.badlogic.gdx.graphics.Pixmap)
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImagePKM(com.badlogic.gdx.graphics.Pixmap)
    public static native int getCompressedDataSize(int,int)
    public static native void formatHeader(java.nio.ByteBuffer,int,int,int)
    private static native java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int)
    private static native java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.graphics.VertexAttributes
    public int getOffset(int,int)
    public int getOffset(int)
    public com.badlogic.gdx.graphics.VertexAttribute findByUsage(int)
    public long getMaskWithSizePacked()
com.tastygamesstudio.phone.FreeTypeSkin
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1
com.badlogic.gdx.Net$HttpRequest
com.badlogic.gdx.utils.DataOutput
com.badlogic.gdx.net.NetJavaServerSocketImpl
com.badlogic.gdx.utils.compression.lz.BinTree
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject
com.badlogic.gdx.graphics.g2d.BitmapFontCache
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont)
    public void setAlphas(float)
    public void setColors(float)
    public void setColors(com.badlogic.gdx.graphics.Color)
    public void setColors(float,float,float,float)
    public void setColors(com.badlogic.gdx.graphics.Color,int,int)
    public void setColors(float,int,int)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setColor(float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
    public float getX()
    public float getY()
    public boolean usesIntegerPositions()
    public float[] getVertices()
    public float[] getVertices(int)
    public int getVertexCount(int)
    public com.badlogic.gdx.utils.Array getLayouts()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator
    public void reset()
com.badlogic.gdx.graphics.g2d.SpriteBatch
    public void <init>(int)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public void disableBlending()
    public void enableBlending()
    public int getBlendSrcFunc()
    public int getBlendDstFunc()
    public int getBlendSrcFuncAlpha()
    public int getBlendDstFuncAlpha()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public boolean isDrawing()
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator
com.badlogic.gdx.net.HttpParametersUtils
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop
com.badlogic.gdx.assets.AssetManager
    public void <init>()
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver)
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver,boolean)
    private synchronized void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor)
    private void nextTask()
    private void addTask(com.badlogic.gdx.assets.AssetDescriptor)
    private boolean updateTask()
    private void incrementRefCountedDependencies(java.lang.String)
    private void handleTaskError(java.lang.Throwable)
    public com.badlogic.gdx.assets.loaders.FileHandleResolver getFileHandleResolver()
    public synchronized java.lang.Object get(java.lang.String)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class)
    public synchronized java.lang.Object get(java.lang.String,boolean)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class,boolean)
    public synchronized java.lang.Object get(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized com.badlogic.gdx.utils.Array getAll(java.lang.Class,com.badlogic.gdx.utils.Array)
    public synchronized boolean contains(java.lang.String)
    public synchronized boolean contains(java.lang.String,java.lang.Class)
    public synchronized boolean containsAsset(java.lang.Object)
    public synchronized boolean isLoaded(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean isLoaded(java.lang.String)
    public synchronized boolean isLoaded(java.lang.String,java.lang.Class)
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class)
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String)
    public synchronized void load(java.lang.String,java.lang.Class)
    public synchronized void load(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean update()
    public boolean update(int)
    public synchronized boolean isFinished()
    public java.lang.Object finishLoadingAsset(com.badlogic.gdx.assets.AssetDescriptor)
    public java.lang.Object finishLoadingAsset(java.lang.String)
    synchronized void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array)
    protected void addAsset(java.lang.String,java.lang.Class,java.lang.Object)
    protected void taskFailed(com.badlogic.gdx.assets.AssetDescriptor,java.lang.RuntimeException)
    public synchronized void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader)
    public synchronized void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader)
    public synchronized int getLoadedAssets()
    public synchronized int getQueuedAssets()
    public synchronized float getProgress()
    public synchronized void setErrorListener(com.badlogic.gdx.assets.AssetErrorListener)
    public synchronized void dispose()
    public synchronized void clear()
    public com.badlogic.gdx.utils.Logger getLogger()
    public void setLogger(com.badlogic.gdx.utils.Logger)
    public synchronized java.lang.String getDiagnostics()
    public synchronized com.badlogic.gdx.utils.Array getAssetNames()
    public synchronized com.badlogic.gdx.utils.Array getDependencies(java.lang.String)
    public synchronized java.lang.Class getAssetType(java.lang.String)
    final com.badlogic.gdx.utils.ObjectMap assets
    final com.badlogic.gdx.utils.ObjectMap assetTypes
    final com.badlogic.gdx.utils.ObjectMap assetDependencies
    final com.badlogic.gdx.utils.ObjectSet injected
    final com.badlogic.gdx.utils.ObjectMap loaders
    final com.badlogic.gdx.utils.Array loadQueue
    final com.badlogic.gdx.utils.async.AsyncExecutor executor
    final com.badlogic.gdx.utils.Array tasks
    com.badlogic.gdx.assets.AssetErrorListener listener
    int loaded
    int toLoad
    int peakTasks
    final com.badlogic.gdx.assets.loaders.FileHandleResolver resolver
    com.badlogic.gdx.utils.Logger log
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier
org.objenesis.strategy.StdInstantiatorStrategy
com.badlogic.gdx.maps.Map
com.esotericsoftware.kryonet.util.InputStreamSender
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController
com.badlogic.gdx.assets.loaders.TextureLoader
com.badlogic.gdx.utils.Pool
    public void <init>(int)
    public void fill(int)
    public void clear()
    public int getFree()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue
    public boolean isAlwaysActive()
    public boolean isActive()
    public void save(java.io.Writer)
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData
com.esotericsoftware.kryo.io.UnsafeMemoryOutput
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20
com.esotericsoftware.jsonbeans.JsonReader
com.badlogic.gdx.graphics.g2d.Batch
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public abstract void disableBlending()
    public abstract void enableBlending()
    public abstract void setBlendFunctionSeparate(int,int,int,int)
    public abstract int getBlendSrcFunc()
    public abstract int getBlendDstFunc()
    public abstract int getBlendSrcFuncAlpha()
    public abstract int getBlendDstFuncAlpha()
    public abstract com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public abstract void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public abstract boolean isBlendingEnabled()
    public abstract boolean isDrawing()
    public static final int X1
    public static final int Y1
    public static final int C1
    public static final int U1
    public static final int V1
    public static final int X2
    public static final int Y2
    public static final int C2
    public static final int U2
    public static final int V2
    public static final int X3
    public static final int Y3
    public static final int C3
    public static final int U3
    public static final int V3
    public static final int X4
    public static final int Y4
    public static final int C4
    public static final int U4
    public static final int V4
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent
    static final int TOUCH_DOWN
    static final int TOUCH_UP
    static final int TOUCH_DRAGGED
    static final int TOUCH_SCROLLED
    static final int TOUCH_MOVED
com.badlogic.gdx.utils.ObjectFloatMap$Values
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction
com.badlogic.gdx.utils.IntFloatMap$Entry
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue
com.badlogic.gdx.utils.UBJsonWriter
com.badlogic.gdx.audio.AudioDevice
com.esotericsoftware.kryonet.Client
    public void <init>()
    private void broadcast(int,java.net.DatagramSocket)
    public void setDiscoveryHandler(com.esotericsoftware.kryonet.ClientDiscoveryHandler)
    public com.esotericsoftware.kryonet.Serialization getSerialization()
    public void connect(int,java.lang.String,int)
    public void connect(int,java.net.InetAddress,int)
    public void reconnect()
    public void stop()
    public void dispose()
    public void removeListener(com.esotericsoftware.kryonet.Listener)
    public void setKeepAliveUDP(int)
    public java.net.InetAddress discoverHost(int,int)
    public java.util.List discoverHosts(int,int)
com.badlogic.gdx.utils.CharArray
com.badlogic.gdx.backends.android.DefaultAndroidInput
    public boolean gyroscopeAvailable
    protected final android.os.Vibrator vibrator
    boolean keyboardAvailable
    private float azimuth
    private float pitch
    private float roll
    final float[] R
    final float[] orientation
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO
    final boolean isStatic
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$1
    final synthetic com.badlogic.gdx.scenes.scene2d.ui.TextTooltip this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$5
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.Texture$1
com.badlogic.gdx.utils.Scaling
    public static final com.badlogic.gdx.utils.Scaling fill
    public static final com.badlogic.gdx.utils.Scaling fillX
    public static final com.badlogic.gdx.utils.Scaling fillY
    public static final com.badlogic.gdx.utils.Scaling stretchX
    public static final com.badlogic.gdx.utils.Scaling stretchY
com.badlogic.gdx.math.Frustum
    private static final com.badlogic.gdx.math.Vector3 tmpV
com.esotericsoftware.kryo.Kryo
    private com.esotericsoftware.kryo.StreamFactory streamFactory
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$6
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.glutils.GLVersion
    private int minorVersion
    private int releaseVersion
    private final java.lang.String vendorString
    private final java.lang.String rendererString
    private final java.lang.String TAG
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback
com.badlogic.gdx.graphics.Cubemap$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$2
    final synthetic com.badlogic.gdx.backends.android.DefaultAndroidInput this$0
com.badlogic.gdx.graphics.g2d.ParticleEmitter
    private boolean behind
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1
    final synthetic com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy this$0
com.badlogic.gdx.scenes.scene2d.utils.Selection
    java.lang.Object lastSelected
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$3
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.glutils.KTXTextureData
    private int glTypeSize
    private int glBaseInternalFormat
com.badlogic.gdx.graphics.g2d.freetype.FreeType
    public static int FT_PIXEL_MODE_NONE
    public static int FT_PIXEL_MODE_GRAY2
    public static int FT_PIXEL_MODE_GRAY4
    public static int FT_PIXEL_MODE_LCD
    public static int FT_PIXEL_MODE_LCD_V
    public static int FT_ENCODING_NONE
    public static int FT_ENCODING_MS_SYMBOL
    public static int FT_ENCODING_UNICODE
    public static int FT_ENCODING_SJIS
    public static int FT_ENCODING_GB2312
    public static int FT_ENCODING_BIG5
    public static int FT_ENCODING_WANSUNG
    public static int FT_ENCODING_JOHAB
    public static int FT_ENCODING_ADOBE_STANDARD
    public static int FT_ENCODING_ADOBE_EXPERT
    public static int FT_ENCODING_ADOBE_CUSTOM
    public static int FT_ENCODING_ADOBE_LATIN_1
    public static int FT_ENCODING_OLD_LATIN_2
    public static int FT_ENCODING_APPLE_ROMAN
    public static int FT_FACE_FLAG_SCALABLE
    public static int FT_FACE_FLAG_FIXED_WIDTH
    public static int FT_FACE_FLAG_SFNT
    public static int FT_FACE_FLAG_VERTICAL
    public static int FT_FACE_FLAG_KERNING
    public static int FT_FACE_FLAG_FAST_GLYPHS
    public static int FT_FACE_FLAG_MULTIPLE_MASTERS
    public static int FT_FACE_FLAG_GLYPH_NAMES
    public static int FT_FACE_FLAG_EXTERNAL_STREAM
    public static int FT_FACE_FLAG_HINTER
    public static int FT_FACE_FLAG_CID_KEYED
    public static int FT_FACE_FLAG_TRICKY
    public static int FT_STYLE_FLAG_ITALIC
    public static int FT_STYLE_FLAG_BOLD
    public static int FT_LOAD_NO_SCALE
    public static int FT_LOAD_RENDER
    public static int FT_LOAD_NO_BITMAP
    public static int FT_LOAD_VERTICAL_LAYOUT
    public static int FT_LOAD_CROP_BITMAP
    public static int FT_LOAD_PEDANTIC
    public static int FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH
    public static int FT_LOAD_NO_RECURSE
    public static int FT_LOAD_IGNORE_TRANSFORM
    public static int FT_LOAD_MONOCHROME
    public static int FT_LOAD_LINEAR_DESIGN
    public static int FT_LOAD_NO_AUTOHINT
    public static int FT_LOAD_TARGET_LCD
    public static int FT_LOAD_TARGET_LCD_V
    public static int FT_RENDER_MODE_LIGHT
    public static int FT_RENDER_MODE_LCD
    public static int FT_RENDER_MODE_LCD_V
    public static int FT_RENDER_MODE_MAX
    public static int FT_KERNING_DEFAULT
    public static int FT_KERNING_UNFITTED
    public static int FT_KERNING_UNSCALED
    public static int FT_STROKER_LINECAP_SQUARE
    public static int FT_STROKER_LINEJOIN_BEVEL
    public static int FT_STROKER_LINEJOIN_MITER
com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$2
    final synthetic com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$4
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.Cubemap
    public com.badlogic.gdx.graphics.CubemapData getCubemapData()
com.badlogic.gdx.utils.Array
    public void <init>(com.badlogic.gdx.utils.Array)
com.esotericsoftware.kryo.util.MapReferenceResolver
    protected com.esotericsoftware.kryo.Kryo kryo
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter
com.badlogic.gdx.graphics.glutils.VertexArray
    boolean isBound
com.badlogic.gdx.backends.android.DefaultAndroidAudio
    private final android.media.AudioManager manager
com.badlogic.gdx.graphics.Mesh
    private final com.badlogic.gdx.math.Vector3 tmpV
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$9
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.math.Vector3
    public static final com.badlogic.gdx.math.Vector3 X
    public static final com.badlogic.gdx.math.Vector3 Y
    public static final com.badlogic.gdx.math.Vector3 Z
    public static final com.badlogic.gdx.math.Vector3 Zero
    private static final com.badlogic.gdx.math.Matrix4 tmpMat
com.badlogic.gdx.assets.AssetLoaderParameters
com.badlogic.gdx.backends.android.AndroidNet
    final com.badlogic.gdx.backends.android.AndroidApplicationBase app
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator
    private int pixelWidth
    private int pixelHeight
com.badlogic.gdx.math.Vector2
    public static final com.badlogic.gdx.math.Vector2 X
    public static final com.badlogic.gdx.math.Vector2 Y
    public static final com.badlogic.gdx.math.Vector2 Zero
com.esotericsoftware.kryonet.Server
    private java.lang.Thread updateThread
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1
    final synthetic com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0
com.badlogic.gdx.backends.android.AndroidZipFileHandle
    public boolean isDirectory()
com.badlogic.gdx.graphics.glutils.ShapeRenderer
    private final com.badlogic.gdx.math.Vector2 tmp
    private float defaultRectLineWidth
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1
    final synthetic com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$7
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.glutils.ShaderProgram
    private final java.nio.FloatBuffer matrix
    private int refCount
    static final java.nio.IntBuffer intbuf
com.badlogic.gdx.utils.StreamUtils
    static void <clinit>()
    public static final byte[] EMPTY_BYTES
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle
    int offsetX
    int offsetY
    int originalWidth
    int originalHeight
com.esotericsoftware.kryo.util.IntArray
    public boolean ordered
com.badlogic.gdx.net.NetJavaImpl
    final com.badlogic.gdx.utils.ObjectMap connections
    final com.badlogic.gdx.utils.ObjectMap listeners
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode
    final synthetic com.badlogic.gdx.backends.android.AndroidGraphics this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$8
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener
    com.badlogic.gdx.scenes.scene2d.Actor touchDownTarget
com.badlogic.gdx.math.Matrix4
    static final com.badlogic.gdx.math.Quaternion quat
    static final com.badlogic.gdx.math.Quaternion quat2
    static final com.badlogic.gdx.math.Vector3 right
    static final com.badlogic.gdx.math.Vector3 tmpForward
    static final com.badlogic.gdx.math.Vector3 tmpUp
com.badlogic.gdx.math.collision.Ray
    static com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.net.NetJavaImpl$1
    final synthetic com.badlogic.gdx.net.NetJavaImpl this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$14
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.scenes.scene2d.Event
    private boolean capture
com.badlogic.gdx.graphics.GLTexture
    public com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap()
    public com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap()
com.badlogic.gdx.backends.android.AndroidGraphics
    int safeInsetLeft
    int safeInsetTop
    int safeInsetBottom
    int safeInsetRight
    javax.microedition.khronos.egl.EGLContext eglContext
    protected int fps
    private float ppiX
    private float ppiY
    private float ppcX
    private float ppcY
    private float density
    private com.badlogic.gdx.Graphics$BufferFormat bufferFormat
com.badlogic.gdx.graphics.glutils.IndexBufferObject
    final boolean isDirect
com.badlogic.gdx.backends.android.AndroidFileHandle
    public boolean isDirectory()
com.badlogic.gdx.math.Quaternion
    private static com.badlogic.gdx.math.Quaternion tmp1
    private static com.badlogic.gdx.math.Quaternion tmp2
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData
    final boolean isDirect
com.badlogic.gdx.graphics.Pixmap
    private com.badlogic.gdx.graphics.Pixmap$Blending blending
    private com.badlogic.gdx.graphics.Pixmap$Filter filter
com.badlogic.gdx.graphics.glutils.FrameBuffer
com.badlogic.gdx.math.Interpolation
    public static final com.badlogic.gdx.math.Interpolation smooth
    public static final com.badlogic.gdx.math.Interpolation smooth2
    public static final com.badlogic.gdx.math.Interpolation$Pow pow2
    public static final com.badlogic.gdx.math.Interpolation$PowIn slowFast
    public static final com.badlogic.gdx.math.Interpolation$PowOut fastSlow
    public static final com.badlogic.gdx.math.Interpolation pow2InInverse
    public static final com.badlogic.gdx.math.Interpolation pow2OutInverse
    public static final com.badlogic.gdx.math.Interpolation$Pow pow3
    public static final com.badlogic.gdx.math.Interpolation$PowIn pow3In
    public static final com.badlogic.gdx.math.Interpolation$PowOut pow3Out
    public static final com.badlogic.gdx.math.Interpolation pow3InInverse
    public static final com.badlogic.gdx.math.Interpolation pow3OutInverse
    public static final com.badlogic.gdx.math.Interpolation$Pow pow4
    public static final com.badlogic.gdx.math.Interpolation$PowIn pow4In
    public static final com.badlogic.gdx.math.Interpolation$PowOut pow4Out
    public static final com.badlogic.gdx.math.Interpolation$Pow pow5
    public static final com.badlogic.gdx.math.Interpolation$PowIn pow5In
    public static final com.badlogic.gdx.math.Interpolation$PowOut pow5Out
    public static final com.badlogic.gdx.math.Interpolation sine
    public static final com.badlogic.gdx.math.Interpolation sineIn
    public static final com.badlogic.gdx.math.Interpolation sineOut
    public static final com.badlogic.gdx.math.Interpolation$Exp exp10
    public static final com.badlogic.gdx.math.Interpolation$ExpIn exp10In
    public static final com.badlogic.gdx.math.Interpolation$ExpOut exp10Out
    public static final com.badlogic.gdx.math.Interpolation$Exp exp5
    public static final com.badlogic.gdx.math.Interpolation$ExpIn exp5In
    public static final com.badlogic.gdx.math.Interpolation$ExpOut exp5Out
    public static final com.badlogic.gdx.math.Interpolation circle
    public static final com.badlogic.gdx.math.Interpolation circleIn
    public static final com.badlogic.gdx.math.Interpolation circleOut
    public static final com.badlogic.gdx.math.Interpolation$Elastic elastic
    public static final com.badlogic.gdx.math.Interpolation$ElasticIn elasticIn
    public static final com.badlogic.gdx.math.Interpolation$ElasticOut elasticOut
    public static final com.badlogic.gdx.math.Interpolation$Swing swing
    public static final com.badlogic.gdx.math.Interpolation$SwingIn swingIn
    public static final com.badlogic.gdx.math.Interpolation$SwingOut swingOut
    public static final com.badlogic.gdx.math.Interpolation$Bounce bounce
    public static final com.badlogic.gdx.math.Interpolation$BounceIn bounceIn
    public static final com.badlogic.gdx.math.Interpolation$BounceOut bounceOut
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData
    final boolean isStatic
com.badlogic.gdx.files.FileHandle
    public boolean isDirectory()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$1
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1
    final synthetic com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration
    public boolean getTouchEventsForLiveWallpaper
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$10
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$2
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$11
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1
    final synthetic com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0
com.badlogic.gdx.graphics.g2d.SpriteBatch
    float invTexWidth
    float invTexHeight
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack
    static final com.badlogic.gdx.math.Rectangle viewport
com.badlogic.gdx.assets.AssetManager
    public synchronized void unload(java.lang.String)
    public synchronized java.lang.String getAssetFileName(java.lang.Object)
    public synchronized void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters)
    public synchronized int getReferenceCount(java.lang.String)
    public synchronized void setReferenceCount(java.lang.String,int)
com.badlogic.gdx.backends.android.DefaultAndroidInput$1
    final synthetic com.badlogic.gdx.backends.android.DefaultAndroidInput this$0
com.badlogic.gdx.scenes.scene2d.ui.Skin$3
    final synthetic com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$12
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20
    private int numSetTexCoords
    private final int normalOffset
    private final int texCoordOffset
com.badlogic.gdx.Gdx
    public static com.badlogic.gdx.Audio audio
    public static com.badlogic.gdx.Net net
com.badlogic.gdx.graphics.PixmapIO$CIM
    private static final byte[] writeBuffer
com.badlogic.gdx.graphics.Camera
    private final com.badlogic.gdx.math.Vector3 tmpVec
    private final com.badlogic.gdx.math.collision.Ray ray
com.esotericsoftware.kryonet.Client
    private int connectTimeout
    private com.esotericsoftware.kryonet.ClientDiscoveryHandler discoveryHandler
com.badlogic.gdx.utils.Json
    private boolean usePrototypes
    private com.badlogic.gdx.utils.JsonWriter$OutputType outputType
    private final com.badlogic.gdx.utils.ObjectMap classToDefaultValues
    private final java.lang.Object[] equals1
    private final java.lang.Object[] equals2
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$13
    final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
com.badlogic.gdx.graphics.g2d.PixmapPacker
    static java.util.regex.Pattern indexPattern
